/**
 * Created by PENG YONG(u5934120) 08/10/2017
 */


package comp1110.ass2.gui;
import comp1110.ass2.StepsGame;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Slider;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.media.AudioClip;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;
import java.util.*;
import javafx.scene.text.Text;

public class Board extends Application {

    private static final int BOARD_WIDTH = 933;
    private static final int BOARD_HEIGHT = 700;
    private static final int BOARD_ROW = 5;
    private static final int BOARD_COLS = 10;
    private static final int PEG_RADIUS = 17;
    private static final String Locations = "ABCDEFGHIJKLMNOPQRSTUVWXYabcdefghijklmnopqrstuvwxy";
    private static final int SQUARE_SIZE = 40;
    private static final int PIECE_IMAGE_SIZE = (int) ((3 * SQUARE_SIZE)*1.33);
    private static final String URI_BASE = "assets/";
    private static  final String PIECES = "ABCDEFGH";
    private static String processing = "";
    private static final String MUSIC = Board.class.getResource(URI_BASE + "Fifth Harmony&Kid Ink-Worth It.mp3").toString();
    private AudioClip loop;
    private boolean Loopplaying = false;

    /* the different level has 10 different question
    and all the ordered solution is placed in the right, because the task9 need lots of time to finish.
    to run the game fast, the task9 is not used below.*/

    /*the level 5 difficluty only two starting pieces */

    /** The task 7 is done by PENG YONG below */

    final private static String[][] RandomPlacement = {{"CEQEHu","CEQEHuBDxFGSGEOHCiAALDBg", "CEQEHuBDxGEOFGSHCiAALDBg", "CEQEHuBDxGEOHCiAALDBgFGS", "CEQEHuBDxGEOHCiAALFGSDBg", "CEQEHuBDxGEOHCiFGSAALDBg", "CEQEHuGEOBDxFGSHCiAALDBg", "CEQEHuGEOBDxHCiAALDBgFGS", "CEQEHuGEOBDxHCiAALFGSDBg", "CEQEHuGEOBDxHCiFGSAALDBg", "CEQEHuGEOHCiAALBDxDBgFGS", "CEQEHuGEOHCiAALBDxFGSDBg", "CEQEHuGEOHCiAALDBgBDxFGS", "CEQEHuGEOHCiBDxAALDBgFGS", "CEQEHuGEOHCiBDxAALFGSDBg", "CEQEHuGEOHCiBDxFGSAALDBg"},
            {"FCLBHF","FCLBHFCGSHBNADgDAiGHlEAo", "FCLBHFGCgCDNDAiAGlHESEAo", "FCLBHFGCgCDNDAiAGlHEnEDI", "FCLBHFGEnEDIHBNADgDAiCDk" ,"FCLBHFGEnHBNADgDAiCDkEDI","FCLBHFGEnHBNADgDAiEDICDk","FCLBHFGEnHBNADgEDIDAiCDk","FCLBHFGEnHBNEDIADgDAiCDk","FCLBHFGGnEDIHBNADgDAiCDk","FCLBHFGGnHBNADgDAiCDkEDI","FCLBHFGGnHBNADgDAiEDICDk","FCLBHFGGnHBNADgEDIDAiCDk","FCLBHFGGnHBNEDIADgDAiCDk","FCLBHFHAgCDNDAiAGlGGnEDI","FCLBHFHBNADgCGSDAiGHlEAo","FCLBHFHBNADgDAiCDkGGnEDI","FCLBHFHBNADgDAiCGSGHlEAo","FCLBHFHBNADgDAiGEnCDkEDI","FCLBHFHBNADgDAiGEnEDICDk" ,"FCLBHFHBNADgDAiGGnCDkEDI","FCLBHFHBNADgDAiGGnEDICDk","FCLBHFHBNADgDFlCDiGGnEDI","FCLBHFHBNADgDFlGGnCDiEDI","FCLBHFHBNADgDFlGGnEDICDi","FCLBHFHBNADgGEnDAiCDkEDI","FCLBHFHBNADgGEnDAiEDICDk","FCLBHFHBNADgGEnEDIDAiCDk","FCLBHFHBNADgGGnDAiCDkEDI","FCLBHFHBNADgGGnDAiEDICDk","FCLBHFHBNADgGGnEDIDAiCDk","FCLBHFHBNAGlCAiDBgGGnEDI","FCLBHFHBNAGlCAiGGnDBgEDI","FCLBHFHBNAGlCAiGGnEDIDBg","FCLBHFHBNAGlGGnCAiDBgEDI","FCLBHFHBNAGlGGnCAiEDIDBg","FCLBHFHBNAGlGGnEDICAiDBg","FCLBHFHBNCGSADgDAiGHlEAo","FCLBHFHBNDFlADgCDiGGnEDI","FCLBHFHBNDFlADgGGnCDiEDI","FCLBHFHBNDFlADgGGnEDICDi","FCLBHFHBNDFlGGnADgCDiEDI","FCLBHFHBNDFlGGnADgEDICDi","FCLBHFHBNDFlGGnEDIADgCDi","FCLBHFHBNGEnADgDAiCDkEDI","FCLBHFHBNGEnADgDAiEDICDk","FCLBHFHBNGEnADgEDIDAiCDk","FCLBHFHBNGEnEDIADgDAiCDk","FCLBHFHBNGGnADgDAiCDkEDI","FCLBHFHBNGGnADgDAiEDICDk", "FCLBHFHBNGGnADgEDIDAiCDk", "FCLBHFHBNGGnEDIADgDAiCDk"},
            {"BGSAHQ","BGSAHQCHjFHlEAoHCNGBgDCL", "BGSAHQCHjFHlHCNEAoGBgDCL","BGSAHQCHjFHlHCNGBgDCLEAo" ,"BGSAHQCHjFHlHCNGBgEAoDCL", "BGSAHQCHjHCNFHlEAoGBgDCL" ,"BGSAHQCHjHCNFHlGBgDCLEAo" ,"BGSAHQCHjHCNFHlGBgEAoDCL" ,"BGSAHQCHjHCNGBgDCLFHlEAo" , "BGSAHQCHjHCNGBgFHlDCLEAo" ,"BGSAHQCHjHCNGBgFHlEAoDCL" ,"BGSAHQCHlDGjFHnHCNGBgEBL" ,"BGSAHQCHlDGjHCNFHnGBgEBL" ,"BGSAHQCHlDGjHCNGBgEBLFHn" ,"BGSAHQCHlDGjHCNGBgFHnEBL" ,"BGSAHQCHlFHnDGjHCNGBgEBL" ,"BGSAHQCHlFHnHGjDCNGBgEBL" ,"BGSAHQCHlFHnHGjGBgDCNEBL" ,"BGSAHQCHlHGjDCNFHnGBgEBL" ,"BGSAHQCHlHGjDCNGBgEBLFHn" ,"BGSAHQCHlHGjDCNGBgFHnEBL" ,"BGSAHQCHlHGjFHnDCNGBgEBL" ,"BGSAHQCHlHGjFHnGBgDCNEBL" ,"BGSAHQCHlHGjGBgDCNEBLFHn" ,"BGSAHQCHlHGjGBgDCNFHnEBL" ,"BGSAHQCHlHGjGBgFHnDCNEBL" ,"BGSAHQDGjFHlEAoHCNGBgCBL" ,"BGSAHQDGjFHlHCNEAoGBgCBL" ,"BGSAHQDGjFHlHCNGBgCBLEAo" ,"BGSAHQDGjFHlHCNGBgEAoCBL" ,"BGSAHQDGjHCNFHlEAoGBgCBL" ,"BGSAHQDGjHCNFHlGBgCBLEAo" ,"BGSAHQDGjHCNFHlGBgEAoCBL" ,"BGSAHQDGjHCNGBgCBLFHlEAo" ,"BGSAHQDGjHCNGBgFHlCBLEAo" ,"BGSAHQDGjHCNGBgFHlEAoCBL" ,"BGSAHQEEfFBiHFnGBkDCNCBL" ,"BGSAHQEEfFBiHFnGDkDCNCBL" ,"BGSAHQEEfFBLGDNDAiHFnCDk" ,"BGSAHQEEfFBLGDNHFnDAiCDk" ,"BGSAHQEEfFBLHFnGDNDAiCDk" ,"BGSAHQEEfFDNGBLDAiHFnCDk" ,"BGSAHQEEfFDNGBLHFnDAiCDk" ,"BGSAHQEEfFDNGDLDAiHFnCDk","BGSAHQEEfFDNGDLHFnDAiCDk","BGSAHQEEfFDNHFnGBLDAiCDk","BGSAHQEEfFDNHFnGDLDAiCDk","BGSAHQEEfGHlFHnHDiDCNCBL","BGSAHQEEfGHlHDiDCNCBLFHn","BGSAHQEEfGHlHDiDCNFHnCBL","BGSAHQEEfGHlHDiFHnDCNCBL","BGSAHQEEfHALCDNDAiGHlFHn","BGSAHQEEfHFlFHnGBiDCNCBL" ,"BGSAHQEEfHFlGBiDCNCBLFHn" ,"BGSAHQEEfHFlGBiDCNFHnCBL" ,"BGSAHQEEfHFlGBiFHnDCNCBL","BGSAHQEEfHFnFBiGBkDCNCBL" ,"BGSAHQEEfHFnFBiGDkDCNCBL","BGSAHQEEfHFnFBLGDNDAiCDk","BGSAHQEEfHFnFDkGBiDCNCBL","BGSAHQEEfHFnFDNGBLDAiCDk","BGSAHQEEfHFnFDNGDLDAiCDk","BGSAHQEEfHFnFElGBiDCNCBL","BGSAHQEFBGCgCDNDAiHFlFHn","BGSAHQEFBGCgCDNDAiHFnFEl","BGSAHQEFBGCgCDNHFlDAiFHn","BGSAHQEFBGCgCDNHFlFHnDAi" ,"BGSAHQEFBGCgCDNHFnDAiFEl" ,"BGSAHQEFBGCgCDNHFnFElDAi" ,"BGSAHQEFBGCgHFnCDNDAiFEl" ,"BGSAHQEFBGCgHFnCDNFElDAi" ,"BGSAHQEFBGHlFHnHBNCAiDBg" ,"BGSAHQEFBGHlHBNCAiDBgFHn" ,"BGSAHQEFBGHlHBNCAiFHnDBg" ,"BGSAHQEFBGHlHBNFHnCAiDBg" ,"BGSAHQEFBHAgCDNDAiGHlFHn" ,"BGSAHQEFBHBNGHlCAiDBgFHn" ,"BGSAHQEFBHBNGHlCAiFHnDBg" ,"BGSAHQEFBHBNGHlFHnCAiDBg" ,"BGSAHQEFBHFnGCgCDNDAiFEl" ,"BGSAHQEFBHFnGCgCDNFElDAi" ,"BGSAHQFBgGHlEAoHDiDCNCBL" ,"BGSAHQFBgGHlHDiDCNCBLEAo" ,"BGSAHQFBgGHlHDiDCNEAoCBL" ,"BGSAHQFBgGHlHDiEAoDCNCBL" ,"BGSAHQFBgGHnHCkCBiDCNEBL" ,"BGSAHQFBgHALCDNDAiGHlEAo" ,"BGSAHQFBgHFlEAoGBiDCNCBL" ,"BGSAHQFBgHFlGBiDCNCBLEAo" ,"BGSAHQFBgHFlGBiDCNEAoCBL" ,"BGSAHQFBgHFlGBiEAoDCNCBL" ,"BGSAHQFCLGCgCDNDAiHFlEAo" ,"BGSAHQFCLGCgCDNDAiHFnEBv","BGSAHQFCLGCgCDNDAiHFnEDk","BGSAHQFCLGCgCDNHFlDAiEAo","BGSAHQFCLGCgCDNHFlEAoDAi","BGSAHQFCLGCgCDNHFnDAiEBv","BGSAHQFCLGCgCDNHFnDAiEDk","BGSAHQFCLGCgHFnCDNDAiEBv","BGSAHQFCLGCgHFnCDNDAiEDk","BGSAHQFCLGHlEAoHBNCAiDBg" ,"BGSAHQFCLGHlHBNCAiDBgEAo" ,"BGSAHQFCLGHlHBNCAiEAoDBg","BGSAHQFCLGHlHBNEAoCAiDBg" ,"BGSAHQFCLGHnHCkDBNCAiEAg","BGSAHQFCLHAgCDNDAiGHlEAo" ,"BGSAHQFCLHBNGHlCAiDBgEAo" ,"BGSAHQFCLHBNGHlCAiEAoDBg" ,"BGSAHQFCLHBNGHlEAoCAiDBg" ,"BGSAHQFCLHFnGCgCDNDAiEBv" , "BGSAHQFCLHFnGCgCDNDAiEDk" ,"BGSAHQFDNEEfGBLDAiHFnCDk" ,"BGSAHQFDNEEfGBLHFnDAiCDk" ,"BGSAHQFDNEEfGDLDAiHFnCDk" ,"BGSAHQFDNEEfGDLHFnDAiCDk" ,"BGSAHQFDNEEfHFnGBLDAiCDk" ,"BGSAHQFDNEEfHFnGDLDAiCDk" ,"BGSAHQFDNGDLDAgHFlCDiEAo" ,"BGSAHQFDNGDLDAgHFlEAoCDi" ,"BGSAHQFDNGDLEAgDAiHFnCDk" ,"BGSAHQFDNGDLEAgHFnDAiCDk" ,"BGSAHQFDNGDLHFlCAiDBgEAo" ,"BGSAHQFDNGDLHFlCAiEAoDBg" ,"BGSAHQFDNGDLHFlDAgCDiEAo" ,"BGSAHQFDNGDLHFlDAgEAoCDi" ,"BGSAHQFDNGDLHFlEAoCAiDBg" ,"BGSAHQFDNGDLHFlEAoDAgCDi" ,"BGSAHQFDNGDLHFnEAgDAiCDk" ,"BGSAHQFDNGDLHFnEBvCAiDBg" ,"BGSAHQFDNGDLHFnEHuCAiDBg" ,"BGSAHQFDNGHlEAoHBLCAiDBg" ,"BGSAHQFDNGHlEAoHCiCBgDCL" ,"BGSAHQFDNGHlEAoHCiDBLCAg" ,"BGSAHQFDNGHlHBLCAiDBgEAo" ,"BGSAHQFDNGHlHBLCAiEAoDBg" ,"BGSAHQFDNGHlHBLEAoCAiDBg" ,"BGSAHQFDNGHlHCiCBgDCLEAo" ,"BGSAHQFDNGHlHCiCBgEAoDCL" ,"BGSAHQFDNGHlHCiDBLCAgEAo" ,"BGSAHQFDNGHlHCiDBLEAoCAg" ,"BGSAHQFDNGHlHCiEAoCBgDCL" ,"BGSAHQFDNGHlHCiEAoDBLCAg" ,"BGSAHQFDNGHnCAkHCiDBLEAg" ,"BGSAHQFDNGHnCAkHCiEBLDBg" ,"BGSAHQFDNGHnCAkHCiEEfDCL" ,"BGSAHQFDNHBLGHlCAiDBgEAo" ,"BGSAHQFDNHBLGHlCAiEAoDBg" ,"BGSAHQFDNHBLGHlEAoCAiDBg" ,"BGSAHQFDNHFlEAoGDLCAiDBg" ,"BGSAHQFDNHFlEAoGDLDAgCDi" ,"BGSAHQFDNHFlGDLCAiDBgEAo" ,"BGSAHQFDNHFlGDLCAiEAoDBg" ,"BGSAHQFDNHFlGDLDAgCDiEAo" ,"BGSAHQFDNHFlGDLDAgEAoCDi" ,"BGSAHQFDNHFlGDLEAoCAiDBg" ,"BGSAHQFDNHFlGDLEAoDAgCDi" ,"BGSAHQFDNHFnEBvGDLCAiDBg" ,"BGSAHQFDNHFnEEfGBLDAiCDk" ,"BGSAHQFDNHFnEEfGDLDAiCDk" ,"BGSAHQFDNHFnEHuGDLCAiDBg" ,"BGSAHQFDNHFnGDLEAgDAiCDk" ,"BGSAHQFDNHFnGDLEBvCAiDBg" ,"BGSAHQFDNHFnGDLEHuCAiDBg" ,"BGSAHQGFjFHlEAoHCNCBgDCL" ,"BGSAHQGFjFHlEAoHCNDBLCAg" ,"BGSAHQGFjFHlEAoHDgDCNCBL" ,"BGSAHQGFjFHlHCNCBgDCLEAo" ,"BGSAHQGFjFHlHCNCBgEAoDCL" ,"BGSAHQGFjFHlHCNDBLCAgEAo" ,"BGSAHQGFjFHlHCNDBLEAoCAg" ,"BGSAHQGFjFHlHCNEAoCBgDCL" ,"BGSAHQGFjFHlHCNEAoDBLCAg" ,"BGSAHQGFjFHlHDgDCNCBLEAo" ,"BGSAHQGFjFHlHDgDCNEAoCBL" ,"BGSAHQGFjFHlHDgEAoDCNCBL" ,"BGSAHQGFjHCNCBgDCLFHlEAo" ,"BGSAHQGFjHCNCBgFHlDCLEAo" ,"BGSAHQGFjHCNCBgFHlEAoDCL" ,"BGSAHQGFjHCNDBLCAgFHlEAo" ,"BGSAHQGFjHCNDBLFHlCAgEAo" ,"BGSAHQGFjHCNDBLFHlEAoCAg" ,"BGSAHQGFjHCNFHlCBgDCLEAo" ,"BGSAHQGFjHCNFHlCBgEAoDCL" ,"BGSAHQGFjHCNFHlDBLCAgEAo" ,"BGSAHQGFjHCNFHlDBLEAoCAg" ,"BGSAHQGFjHCNFHlEAoCBgDCL" ,"BGSAHQGFjHCNFHlEAoDBLCAg" ,"BGSAHQGFjHDgDCNCBLFHlEAo" ,"BGSAHQGFjHDgDCNFHlCBLEAo" ,"BGSAHQGFjHDgDCNFHlEAoCBL" ,"BGSAHQGFjHDgFHlDCNCBLEAo" ,"BGSAHQGFjHDgFHlDCNEAoCBL" ,"BGSAHQGFjHDgFHlEAoDCNCBL" ,"BGSAHQGHjFHlEAoHCNCBgDCL" ,"BGSAHQGHjFHlEAoHCNDBLCAg" ,"BGSAHQGHjFHlEAoHDgDCNCBL" ,"BGSAHQGHjFHlHCNCBgDCLEAo" ,"BGSAHQGHjFHlHCNCBgEAoDCL" ,"BGSAHQGHjFHlHCNDBLCAgEAo" ,"BGSAHQGHjFHlHCNDBLEAoCAg" ,"BGSAHQGHjFHlHCNEAoCBgDCL" ,"BGSAHQGHjFHlHCNEAoDBLCAg","BGSAHQGHjFHlHDgDCNCBLEAo" ,"BGSAHQGHjFHlHDgDCNEAoCBL" ,"BGSAHQGHjFHlHDgEAoDCNCBL", "BGSAHQGHjHCNCBgDCLFHlEAo" ,"BGSAHQGHjHCNCBgFHlDCLEAo" ,"BGSAHQGHjHCNCBgFHlEAoDCL" ,"BGSAHQGHjHCNDBLCAgFHlEAo" ,"BGSAHQGHjHCNDBLFHlCAgEAo" ,"BGSAHQGHjHCNDBLFHlEAoCAg" ,"BGSAHQGHjHCNFHlCBgDCLEAo" ,"BGSAHQGHjHCNFHlCBgEAoDCL" ,"BGSAHQGHjHCNFHlDBLCAgEAo" ,"BGSAHQGHjHCNFHlDBLEAoCAg" ,"BGSAHQGHjHCNFHlEAoCBgDCL" ,"BGSAHQGHjHCNFHlEAoDBLCAg" ,"BGSAHQGHjHDgDCNCBLFHlEAo" ,"BGSAHQGHjHDgDCNFHlCBLEAo","BGSAHQGHjHDgDCNFHlEAoCBL" ,"BGSAHQGHjHDgFHlDCNCBLEAo" ,"BGSAHQGHjHDgFHlDCNEAoCBL" ,"BGSAHQGHjHDgFHlEAoDCNCBL" ,"BGSAHQGHlEAoFAiHCNCBgDCL" ,"BGSAHQGHlEAoFAiHCNDBLCAg" ,"BGSAHQGHlEAoFAiHDgDCNCBL" ,"BGSAHQGHlEAoFBgHDiDCNCBL" ,"BGSAHQGHlEAoFCLHBNCAiDBg" ,"BGSAHQGHlEAoFDNHBLCAiDBg" ,"BGSAHQGHlEAoFDNHCiCBgDCL" ,"BGSAHQGHlEAoFDNHCiDBLCAg" ,"BGSAHQGHlEAoFEOHBLCAiDBg" ,"BGSAHQGHlEAoFEOHCiCBgDCL" ,"BGSAHQGHlEAoFEOHCiDBLCAg","BGSAHQGHlEAoFFjHCNCBgDCL","BGSAHQGHlEAoFFjHCNDBLCAg" ,"BGSAHQGHlEAoFFjHDgDCNCBL" ,"BGSAHQGHlEEfFHnHDiDCNCBL" ,"BGSAHQGHlEEfHDiDCNCBLFHn" ,"BGSAHQGHlEEfHDiDCNFHnCBL" ,"BGSAHQGHlEEfHDiFHnDCNCBL","BGSAHQGHlEFBFHnHBNCAiDBg" ,"BGSAHQGHlEFBHBNCAiDBgFHn" ,"BGSAHQGHlEFBHBNCAiFHnDBg" ,"BGSAHQGHlEFBHBNFHnCAiDBg" ,"BGSAHQGHlFAiEAoHCNCBgDCL" ,"BGSAHQGHlFAiEAoHCNDBLCAg" ,"BGSAHQGHlFAiEAoHDgDCNCBL","BGSAHQGHlFAiHCNCBgDCLEAo" ,"BGSAHQGHlFAiHCNCBgEAoDCL" ,"BGSAHQGHlFAiHCNDBLCAgEAo" ,"BGSAHQGHlFAiHCNDBLEAoCAg","BGSAHQGHlFAiHCNEAoCBgDCL","BGSAHQGHlFAiHCNEAoDBLCAg","BGSAHQGHlFAiHDgDCNCBLEAo" ,"BGSAHQGHlFAiHDgDCNEAoCBL" ,"BGSAHQGHlFAiHDgEAoDCNCBL","BGSAHQGHlFBgEAoHDiDCNCBL" ,"BGSAHQGHlFBgHDiDCNCBLEAo","BGSAHQGHlFBgHDiDCNEAoCBL","BGSAHQGHlFBgHDiEAoDCNCBL","BGSAHQGHlFCLEAoHBNCAiDBg","BGSAHQGHlFCLHBNCAiDBgEAo","BGSAHQGHlFCLHBNCAiEAoDBg","BGSAHQGHlFCLHBNEAoCAiDBg","BGSAHQGHlFDNEAoHBLCAiDBg","BGSAHQGHlFDNEAoHCiCBgDCL","BGSAHQGHlFDNEAoHCiDBLCAg","BGSAHQGHlFDNHBLCAiDBgEAo","BGSAHQGHlFDNHBLCAiEAoDBg" ,"BGSAHQGHlFDNHBLEAoCAiDBg","BGSAHQGHlFDNHCiCBgDCLEAo", "BGSAHQGHlFDNHCiCBgEAoDCL" ,"BGSAHQGHlFDNHCiDBLCAgEAo" ,"BGSAHQGHlFDNHCiDBLEAoCAg" ,"BGSAHQGHlFDNHCiEAoCBgDCL","BGSAHQGHlFDNHCiEAoDBLCAg","BGSAHQGHlFEOEAoHBLCAiDBg" ,"BGSAHQGHlFEOEAoHCiCBgDCL" ,"BGSAHQGHlFEOEAoHCiDBLCAg\n", "BGSAHQGHlFEOHBLCAiDBgEAo","BGSAHQGHlFEOHBLCAiEAoDBg" ,"BGSAHQGHlFEOHBLEAoCAiDBg","BGSAHQGHlFEOHCiCBgDCLEAo" ,"BGSAHQGHlFEOHCiCBgEAoDCL","BGSAHQGHlFEOHCiDBLCAgEAo","BGSAHQGHlFEOHCiDBLEAoCAg","BGSAHQGHlFEOHCiEAoCBgDCL","BGSAHQGHlFEOHCiEAoDBLCAg","BGSAHQGHlFFjEAoHCNCBgDCL" ,"BGSAHQGHlFFjEAoHCNDBLCAg","BGSAHQGHlFFjEAoHDgDCNCBL","BGSAHQGHlFFjHCNCBgDCLEAo","BGSAHQGHlFFjHCNCBgEAoDCL","BGSAHQGHlFFjHCNDBLCAgEAo","BGSAHQGHlFFjHCNDBLEAoCAg","BGSAHQGHlFFjHCNEAoCBgDCL" ,"BGSAHQGHlFFjHCNEAoDBLCAg","BGSAHQGHlFFjHDgDCNCBLEAo","BGSAHQGHlFFjHDgDCNEAoCBL","BGSAHQGHlFFjHDgEAoDCNCBL", "BGSAHQGHlFHnEEfHDiDCNCBL" ,"BGSAHQGHlFHnEFBHBNCAiDBg" ,"BGSAHQGHnFBgHCkCBiDCNEBL","BGSAHQGHnFCLHCkDBNCAiEAg", "BGSAHQGHnFDNCAkHCiDBLEAg" ,"BGSAHQGHnFDNCAkHCiEBLDBg","BGSAHQGHnFDNCAkHCiEEfDCL","BGSAHQGHnHCkFBgCBiDCNEBL" ,"BGSAHQGHnHCkFCLDBNCAiEAg","BGSAHQHFlEAoFBgGBiDCNCBL","BGSAHQHFlEEfFHnGBiDCNCBL","BGSAHQHFlEEfGBiDCNCBLFHn","BGSAHQHFlEEfGBiDCNFHnCBL","BGSAHQHFlEEfGBiFHnDCNCBL","BGSAHQHFlFBgEAoGBiDCNCBL","BGSAHQHFlFBgGBiDCNCBLEAo","BGSAHQHFlFBgGBiDCNEAoCBL","BGSAHQHFlFBgGBiEAoDCNCBL","BGSAHQHFlFHnEEfGBiDCNCBL","BGSAHQHFnEBvFDNGDLCAiDBg","BGSAHQHFnEBvFEOGDLCAiDBg","BGSAHQHFnEEfFBiGBkDCNCBL","BGSAHQHFnEEfFBiGDkDCNCBL","BGSAHQHFnEEfFBLGDNDAiCDk","BGSAHQHFnEEfFDkGBiDCNCBL", "BGSAHQHFnEEfFDNGBLDAiCDk","BGSAHQHFnEEfFDNGDLDAiCDk","BGSAHQHFnEEfFElGBiDCNCBL","BGSAHQHFnEFBGCgCDNDAiFEl","BGSAHQHFnEFBGCgCDNFElDAi","BGSAHQHFnEHuFDNGDLCAiDBg","BGSAHQHFnEHuFEOGDLCAiDBg","BGSAHQHFnFCLGCgCDNDAiEBv","BGSAHQHFnFCLGCgCDNDAiEDk","BGSAHQHFnFDkEEfGBiDCNCBL","BGSAHQHFnFDNEBvGDLCAiDBg","BGSAHQHFnFDNEEfGBLDAiCDk","BGSAHQHFnFDNEEfGDLDAiCDk","BGSAHQHFnFDNEHuGDLCAiDBg","BGSAHQHFnFDNGDLEAgDAiCDk","BGSAHQHFnFDNGDLEBvCAiDBg","BGSAHQHFnFDNGDLEHuCAiDBg", "BGSAHQHFnFElEEfGBiDCNCBL"},
            {"EEfHAL","EEfHALACiCCNDElBDPGGnFGS" ,"EEfHALACiCCNDElBDxGFSFFQ" ,"EEfHALACiCCNDElBFQGGnFGS" ,"EEfHALACiCCNDElGFQFHSBDx" ,"EEfHALACiCCNDElGFSBBGFHn" ,"EEfHALACiCCNDElGFSBDPFHn" ,"EEfHALACiCCNDElGFSBDxFFQ" ,"EEfHALACiCCNDElGFSFFQBDx" ,"EEfHALACiCCNDElGFSFHnBBG" ,"EEfHALACiCCNDElGFSFHnBDP" ,"EEfHALACiCCNDElGGnBCTFFQ" ,"EEfHALACiCCNDElGGnBDPFGS" ,"EEfHALACiCCNDElGHSBBGFHn" ,"EEfHALACiCCNDElGHSBDPFHn" ,"EEfHALACiCCNDElGHSBDxFFQ" ,"EEfHALACiCCNDElGHSFFQBDx" ,"EEfHALACiCCNDElGHSFHnBBG" ,"EEfHALACiCCNDElGHSFHnBDP" ,"EEfHALACiDElBDxCCNGFSFFQ" ,"EEfHALACiDElBDxGFSCCNFFQ" ,"EEfHALACiDElBDxGFSFFQCCN" ,"EEfHALACiDElCCNBDPGGnFGS" ,"EEfHALACiDElCCNBDxGFSFFQ" ,"EEfHALACiDElCCNBFQGGnFGS" ,"EEfHALACiDElCCNGFQFHSBDx" ,"EEfHALACiDElCCNGFSBBGFHn" ,"EEfHALACiDElCCNGFSBDPFHn" ,"EEfHALACiDElCCNGFSBDxFFQ" ,"EEfHALACiDElCCNGFSFFQBDx" ,"EEfHALACiDElCCNGFSFHnBBG" ,"EEfHALACiDElCCNGFSFHnBDP" ,"EEfHALACiDElCCNGGnBCTFFQ" ,"EEfHALACiDElCCNGGnBDPFGS" ,"EEfHALACiDElCCNGHSBBGFHn" ,"EEfHALACiDElCCNGHSBDPFHn" ,"EEfHALACiDElCCNGHSBDxFFQ" ,"EEfHALACiDElCCNGHSFFQBDx" ,"EEfHALACiDElCCNGHSFHnBBG" ,"EEfHALACiDElCCNGHSFHnBDP" ,"EEfHALACiDElCFQBBEGGnFGS" ,"EEfHALACiDElCFQBDNGGnFGS" ,"EEfHALACiDElCFQFFOGGnBCT" ,"EEfHALACiDElCFQGGnBBEFGS" ,"EEfHALACiDElCFQGGnBCTFFO" ,"EEfHALACiDElCFQGGnBDNFGS" ,"EEfHALACiDElCFQGGnFFOBCT" ,"EEfHALACiDElCFQGGnFGSBBE" ,"EEfHALACiDElCFQGGnFGSBDN" ,"EEfHALACiDElGFQCCNFHSBDx" ,"EEfHALACiDElGFQFHSBDxCCN" ,"EEfHALACiDElGFQFHSCCNBDx" ,"EEfHALACiDElGFSBDxCCNFFQ" ,"EEfHALACiDElGFSBDxFFQCCN" ,"EEfHALACiDElGFSCCNBBGFHn" ,"EEfHALACiDElGFSCCNBDPFHn" ,"EEfHALACiDElGFSCCNBDxFFQ" ,"EEfHALACiDElGFSCCNFFQBDx","EEfHALACiDElGFSCCNFHnBBG","EEfHALACiDElGFSCCNFHnBDP","EEfHALACiDElGFSFFQBDxCCN" ,"EEfHALACiDElGFSFFQCCNBDx" ,"EEfHALACiDElGFSFHnCCNBBG","EEfHALACiDElGFSFHnCCNBDP","EEfHALACiDElGGnBCTCCNFFQ" ,"EEfHALACiDElGGnBCTFFQCCN","EEfHALACiDElGGnCCNBCTFFQ","EEfHALACiDElGGnCCNBDPFGS","EEfHALACiDElGHSBDxCCNFFQ","EEfHALACiDElGHSBDxFFQCCN","EEfHALACiDElGHSCCNBBGFHn","EEfHALACiDElGHSCCNBDPFHn","EEfHALACiDElGHSCCNBDxFFQ","EEfHALACiDElGHSCCNFFQBDx","EEfHALACiDElGHSCCNFHnBBG","EEfHALACiDElGHSCCNFHnBDP","EEfHALACiDElGHSFFQBDxCCN","EEfHALACiDElGHSFFQCCNBDx","EEfHALACiDElGHSFHnCCNBBG","EEfHALACiDElGHSFHnCCNBDP","EEfHALAFnFAkDDiCCNGFSBBG" ,"EEfHALAFnFAkDDiCCNGFSBDP","EEfHALAFnFAkDDiGFSCCNBBG","EEfHALAFnFAkDDiGFSCCNBDP","EEfHALAFnFAkGFSDDiCCNBBG","EEfHALAFnFAkGFSDDiCCNBDP" ,"EEfHALAHSFDPCDNDAiGHlBDx","EEfHALBDNCGQDAiAGlGGnFGS","EEfHALBDNDAiCGQAGlGGnFGS","EEfHALBEjCCNDElAFnGFSFFQ","EEfHALBEjDElAFnCCNGFSFFQ" ,"EEfHALBEjDElAFnGFSCCNFFQ","EEfHALBEjDElAFnGFSFFQCCN","EEfHALBEjDElCCNAFnGFSFFQ","EEfHALBElAFnDDiCCNGFSFFQ","EEfHALBElAFnDDiGFSCCNFFQ","EEfHALBElAFnDDiGFSFFQCCN","EEfHALBElAFnGFSDDiCCNFFQ","EEfHALBElAFnGFSDDiFFQCCN","EEfHALBElDDiAFnCCNGFSFFQ","EEfHALBElDDiAFnGFSCCNFFQ","EEfHALBElDDiAFnGFSFFQCCN","EEfHALBElDDiCCNAFnGFSFFQ","EEfHALBFOCGQDAiAGlGGnFGS","EEfHALBFODAiCGQAGlGGnFGS","EEfHALBFQCDNDAiAGlGGnFGS" ,"EEfHALBGSAHQCDNDAiGHlFHn" ,"EEfHALBHFCDNDAiAGlGGnFGS","EEfHALBHnAESGEQCDNDAiFEl","EEfHALBHnAESGEQCDNFElDAi","EEfHALBHnCElACiGFSFFQDDN","EEfHALBHnCElGFSACiFFQDDN","EEfHALCFjDElAFnGFSFFQBBE" ,"EEfHALCFjDElAFnGFSFFQBDN","EEfHALCFlAFnDDiGFSFFQBBE" ,"EEfHALCFlAFnDDiGFSFFQBDN","EEfHALCFlAFnGFSDDiFFQBBE","EEfHALCFlAFnGFSDDiFFQBDN","EEfHALCFlDDiAFnGFSFFQBBE","EEfHALCFlDDiAFnGFSFFQBDN","EEfHALCHSDGQAHOGHjFHlBDx","EEfHALDGSAHQCDNGHjFHlBDx","EEfHALDHnAESGEQCDNFElBAi","EEfHALDHnCElACiGFSFFQBBE","EEfHALDHnCElACiGFSFFQBDN" ,"EEfHALDHnCElGFSACiFFQBBE","EEfHALDHnCElGFSACiFFQBDN","EEfHALFAkAFnDDiCCNGFSBBG","EEfHALFAkAFnDDiCCNGFSBDP","EEfHALFAkAFnDDiGFSCCNBBG","EEfHALFAkAFnDDiGFSCCNBDP","EEfHALFAkAFnGFSDDiCCNBBG","EEfHALFAkAFnGFSDDiCCNBDP","EEfHALFAkDDiAFnCCNGFSBBG","EEfHALFAkDDiAFnCCNGFSBDP","EEfHALFAkDDiAFnGFSCCNBBG" ,"EEfHALFAkDDiAFnGFSCCNBDP" ,"EEfHALFAkDDiCCNAFnGFSBBG","EEfHALFAkDDiCCNAFnGFSBDP","EEfHALFDPCDNDAiAGlGGnBCT"}
            ,{"CHSFCL","CHSFCLAHQBFqHBNDAiGHlEAo" ,"CHSFCLAHQHBNBFqDAiGHlEAo" ,"CHSFCLAHQHBNEAgDAiGHlBDx" ,"CHSFCLBBGHBNADgDAiGHlEAo" ,"CHSFCLBFqAHQHBNDAiGHlEAo" ,"CHSFCLBFqDGQAHOHFlEAoGBi" ,"CHSFCLBFqDGQAHOHFlEAoGDi" ,"CHSFCLBFqDGQAHOHFlGBiEAo" ,"CHSFCLBFqDGQAHOHFlGDiEAo" ,"CHSFCLBHFHBNADgDAiGHlEAo" ,"CHSFCLBHnGCgHGQAHODAiEBv" ,"CHSFCLBHnGCgHGQAHODAiEDk" ,"CHSFCLBHnGEQHBNADgDAiEBv" ,"CHSFCLBHnGEQHBNADgDAiEDk" ,"CHSFCLBHnHGQAHOGCgDAiEBv" ,"CHSFCLBHnHGQAHOGCgDAiEDk" , "CHSFCLBHnHGQGCgAHODAiEBv" , "CHSFCLBHnHGQGCgAHODAiEDk" , "CHSFCLBHnHGlGAPDBNADgEBt" , "CHSFCLBHnHGlGAPDBNADgEDi" , "CHSFCLDGQAHOBFqHFlEAoGBi" , "CHSFCLDGQAHOBFqHFlEAoGDi" , "CHSFCLDGQAHOBFqHFlGBiEAo" , "CHSFCLDGQAHOBFqHFlGDiEAo" , "CHSFCLDGQAHOGCgHFlBAiEAo" , "CHSFCLDGQAHOGCgHFlBDxEBt" , "CHSFCLDGQAHOGCgHFlBDxEDi" , "CHSFCLDGQAHOGCgHFlEAoBAi" , "CHSFCLDGQAHOGCgHFlEBtBDx" , "CHSFCLDGQAHOGCgHFlEDiBDx" , "CHSFCLDGQAHOGHlBDxHCiEAg" , "CHSFCLDGQAHOGHlEAoHCiBBg" , "CHSFCLDGQAHOGHlHCiBBgEAo" , "CHSFCLDGQAHOGHlHCiBDxEAg" , "CHSFCLDGQAHOGHlHCiEAgBDx" , "CHSFCLDGQAHOGHlHCiEAoBBg" ,"CHSFCLDGQAHOHFlBDxEBtGAg" ,"CHSFCLDGQAHOHFlBDxEBtGCg" ,"CHSFCLDGQAHOHFlBDxEHsGAg" ,"CHSFCLDGQAHOHFlBDxEHsGCg" ,"CHSFCLDGQAHOHFlBDxGCgEBt" ,"CHSFCLDGQAHOHFlBDxGCgEDi" ,"CHSFCLDGQAHOHFlBFqEAoGBi" ,"CHSFCLDGQAHOHFlBFqEAoGDi" ,"CHSFCLDGQAHOHFlBFqGBiEAo" ,"CHSFCLDGQAHOHFlBFqGDiEAo" ,"CHSFCLDGQAHOHFlEAoBFqGBi" ,"CHSFCLDGQAHOHFlEAoBFqGDi" ,"CHSFCLDGQAHOHFlEAoGCgBAi" ,"CHSFCLDGQAHOHFlEBtBDxGAg" ,"CHSFCLDGQAHOHFlEBtBDxGCg" ,"CHSFCLDGQAHOHFlEBtGAgBDx" ,"CHSFCLDGQAHOHFlEBtGCgBDx" ,"CHSFCLDGQAHOHFlEHsBDxGAg" ,"CHSFCLDGQAHOHFlEHsBDxGCg" ,"CHSFCLDGQAHOHFlEHsGAgBDx" ,"CHSFCLDGQAHOHFlEHsGCgBDx" ,"CHSFCLDGQAHOHFlGCgBAiEAo" ,"CHSFCLDGQAHOHFlGCgBDxEBt" ,"CHSFCLDGQAHOHFlGCgBDxEDi" ,"CHSFCLDGQAHOHFlGCgEAoBAi" ,"CHSFCLDGQAHOHFlGCgEBtBDx" ,"CHSFCLDGQAHOHFlGCgEDiBDx" ,"CHSFCLDGQBFqAHOHFlEAoGBi" ,"CHSFCLDGQBFqAHOHFlEAoGDi" ,"CHSFCLDGQBFqAHOHFlGBiEAo" ,"CHSFCLDGQBFqAHOHFlGDiEAo" ,"CHSFCLDGQGCgAHOHFlBAiEAo" ,"CHSFCLDGQGCgAHOHFlBDxEBt" ,"CHSFCLDGQGCgAHOHFlBDxEDi" ,"CHSFCLDGQGCgAHOHFlEAoBAi" ,"CHSFCLDGQGCgAHOHFlEBtBDx" ,"CHSFCLDGQGCgAHOHFlEDiBDx" ,"CHSFCLDGQGHlAHOBDxHCiEAg","CHSFCLDGQGHlAHOEAoHCiBBg" ,"CHSFCLDGQGHlAHOHCiBBgEAo" ,"CHSFCLDGQGHlAHOHCiBDxEAg" ,"CHSFCLDGQGHlAHOHCiEAgBDx" ,"CHSFCLDGQGHlAHOHCiEAoBBg" ,"CHSFCLDGQGHlBDxAHOHCiEAg" ,"CHSFCLDGQGHlEAoAHOHCiBBg" ,"CHSFCLEAoGCgHGQAHODAiBAk" ,"CHSFCLEAoGEQHBNADgDAiBAk" ,"CHSFCLEAoHGQAHOGCgDAiBAk" ,"CHSFCLEAoHGQGCgAHODAiBAk" ,"CHSFCLEAoHGlGAPDBNADgBAi" ,"CHSFCLEGQHBNADgDAiGHlBDx" ,"CHSFCLGCgBHnHGQAHODAiEBv" ,"CHSFCLGCgBHnHGQAHODAiEDk" ,"CHSFCLGCgDGQAHOHFlBAiEAo" ,"CHSFCLGCgDGQAHOHFlBDxEBt" ,"CHSFCLGCgDGQAHOHFlBDxEDi" ,"CHSFCLGCgDGQAHOHFlEAoBAi" ,"CHSFCLGCgDGQAHOHFlEBtBDx" ,"CHSFCLGCgDGQAHOHFlEDiBDx" ,"CHSFCLGCgEAoHGQAHODAiBAk" ,"CHSFCLGCgHGQAHODAiBAkEAo" ,"CHSFCLGCgHGQAHODAiEAoBAk" ,"CHSFCLGCgHGQAHODAiEDkBDx" ,"CHSFCLGCgHGQAHOEAoDAiBAk" ,"CHSFCLGCgHGQEAoAHODAiBAk" ,"CHSFCLGEQEAoHBNADgDAiBAk" ,"CHSFCLGEQHBNADgDAiBAkEAo" ,"CHSFCLGEQHBNADgDAiEAoBAk" ,"CHSFCLGEQHBNADgDAiEDkBDx" ,"CHSFCLGEQHBNADgEAoDAiBAk" ,"CHSFCLGEQHBNEAoADgDAiBAk" ,"CHSFCLHGQAHOEAoGCgDAiBAk" ,"CHSFCLHGQAHOGCgDAiBAkEAo" ,"CHSFCLHGQAHOGCgDAiEAoBAk" ,"CHSFCLHGQAHOGCgDAiEDkBDx" ,"CHSFCLHGQAHOGCgEAoDAiBAk" ,"CHSFCLHGQEAoAHOGCgDAiBAk" ,"CHSFCLHGQEAoGCgAHODAiBAk" ,"CHSFCLHGQGCgAHODAiBAkEAo" ,"CHSFCLHGQGCgAHODAiEAoBAk" ,"CHSFCLHGQGCgAHODAiEDkBDx" ,"CHSFCLHGQGCgAHOEAoDAiBAk" ,"CHSFCLHGQGCgEAoAHODAiBAk"}
            ,{"FBmBEe","FBmBEeABRCEjDCPHCNGBgEBL","FBmBEeABREEfHCPGBiDCNCBL","FBmBEeABRHCPEEfGBiDCNCBL","FBmBEeCEjABRDCPHCNGBgEBL","FBmBEeEEfABRHCPGBiDCNCBL"}
            ,{"EEfHAL","EEfHALACiCCNDElBDPGGnFGS","EEfHALACiCCNDElBDxGFSFFQ","EEfHALACiCCNDElBFQGGnFGS","EEfHALACiCCNDElGFQFHSBDx","EEfHALACiCCNDElGFSBBGFHn","EEfHALACiCCNDElGFSBDPFHn","EEfHALACiCCNDElGFSBDxFFQ","EEfHALACiCCNDElGFSFFQBDx","EEfHALACiCCNDElGFSFHnBBG","EEfHALACiCCNDElGFSFHnBDP","EEfHALACiCCNDElGGnBCTFFQ","EEfHALACiCCNDElGGnBDPFGS","EEfHALACiCCNDElGHSBBGFHn","EEfHALACiCCNDElGHSBDPFHn","EEfHALACiCCNDElGHSBDxFFQ","EEfHALACiCCNDElGHSFFQBDx","EEfHALACiCCNDElGHSFHnBBG","EEfHALACiCCNDElGHSFHnBDP","EEfHALACiDElBDxCCNGFSFFQ","EEfHALACiDElBDxGFSCCNFFQ","EEfHALACiDElBDxGFSFFQCCN","EEfHALACiDElCCNBDPGGnFGS","EEfHALACiDElCCNBDxGFSFFQ","EEfHALACiDElCCNBFQGGnFGS","EEfHALACiDElCCNGFQFHSBDx","EEfHALACiDElCCNGFSBBGFHn","EEfHALACiDElCCNGFSBDPFHn","EEfHALACiDElCCNGFSBDxFFQ","EEfHALACiDElCCNGFSFFQBDx","EEfHALACiDElCCNGFSFHnBBG","EEfHALACiDElCCNGFSFHnBDP","EEfHALACiDElCCNGGnBCTFFQ","EEfHALACiDElCCNGGnBDPFGS","EEfHALACiDElCCNGHSBBGFHn","EEfHALACiDElCCNGHSBDPFHn","EEfHALACiDElCCNGHSBDxFFQ","EEfHALACiDElCCNGHSFFQBDx","EEfHALACiDElCCNGHSFHnBBG","EEfHALACiDElCCNGHSFHnBDP","EEfHALACiDElCFQBBEGGnFGS","EEfHALACiDElCFQBDNGGnFGS","EEfHALACiDElCFQFFOGGnBCT","EEfHALACiDElCFQGGnBBEFGS","EEfHALACiDElCFQGGnBCTFFO","EEfHALACiDElCFQGGnBDNFGS","EEfHALACiDElCFQGGnFFOBCT","EEfHALACiDElCFQGGnFGSBBE","EEfHALACiDElCFQGGnFGSBDN","EEfHALACiDElGFQCCNFHSBDx","EEfHALACiDElGFQFHSBDxCCN","EEfHALACiDElGFQFHSCCNBDx","EEfHALACiDElGFSBDxCCNFFQ","EEfHALACiDElGFSBDxFFQCCN","EEfHALACiDElGFSCCNBBGFHn","EEfHALACiDElGFSCCNBDPFHn","EEfHALACiDElGFSCCNBDxFFQ","EEfHALACiDElGFSCCNFFQBDx","EEfHALACiDElGFSCCNFHnBBG","EEfHALACiDElGFSCCNFHnBDP","EEfHALACiDElGFSFFQBDxCCN","EEfHALACiDElGFSFFQCCNBDx","EEfHALACiDElGFSFHnCCNBBG","EEfHALACiDElGFSFHnCCNBDP","EEfHALACiDElGGnBCTCCNFFQ","EEfHALACiDElGGnBCTFFQCCN","EEfHALACiDElGGnCCNBCTFFQ","EEfHALACiDElGGnCCNBDPFGS","EEfHALACiDElGHSBDxCCNFFQ","EEfHALACiDElGHSBDxFFQCCN","EEfHALACiDElGHSCCNBBGFHn","EEfHALACiDElGHSCCNBDPFHn","EEfHALACiDElGHSCCNBDxFFQ","EEfHALACiDElGHSCCNFFQBDx","EEfHALACiDElGHSCCNFHnBBG","EEfHALACiDElGHSCCNFHnBDP","EEfHALACiDElGHSFFQBDxCCN","EEfHALACiDElGHSFFQCCNBDx","EEfHALACiDElGHSFHnCCNBBG","EEfHALACiDElGHSFHnCCNBDP","EEfHALAFnFAkDDiCCNGFSBBG","EEfHALAFnFAkDDiCCNGFSBDP","EEfHALAFnFAkDDiGFSCCNBBG","EEfHALAFnFAkDDiGFSCCNBDP","EEfHALAFnFAkGFSDDiCCNBBG","EEfHALAFnFAkGFSDDiCCNBDP","EEfHALAHSFDPCDNDAiGHlBDx","EEfHALBDNCGQDAiAGlGGnFGS","EEfHALBDNDAiCGQAGlGGnFGS","EEfHALBEjCCNDElAFnGFSFFQ","EEfHALBEjDElAFnCCNGFSFFQ","EEfHALBEjDElAFnGFSCCNFFQ","EEfHALBEjDElAFnGFSFFQCCN","EEfHALBEjDElCCNAFnGFSFFQ","EEfHALBElAFnDDiCCNGFSFFQ","EEfHALBElAFnDDiGFSCCNFFQ","EEfHALBElAFnDDiGFSFFQCCN","EEfHALBElAFnGFSDDiCCNFFQ","EEfHALBElAFnGFSDDiFFQCCN","EEfHALBElDDiAFnCCNGFSFFQ","EEfHALBElDDiAFnGFSCCNFFQ","EEfHALBElDDiAFnGFSFFQCCN","EEfHALBElDDiCCNAFnGFSFFQ","EEfHALBFOCGQDAiAGlGGnFGS","EEfHALBFODAiCGQAGlGGnFGS","EEfHALBFQCDNDAiAGlGGnFGS","EEfHALBGSAHQCDNDAiGHlFHn","EEfHALBHFCDNDAiAGlGGnFGS","EEfHALBHnAESGEQCDNDAiFEl","EEfHALBHnAESGEQCDNFElDAi","EEfHALBHnCElACiGFSFFQDDN","EEfHALBHnCElGFSACiFFQDDN","EEfHALCFjDElAFnGFSFFQBBE","EEfHALCFjDElAFnGFSFFQBDN","EEfHALCFlAFnDDiGFSFFQBBE","EEfHALCFlAFnDDiGFSFFQBDN","EEfHALCFlAFnGFSDDiFFQBBE","EEfHALCFlAFnGFSDDiFFQBDN","EEfHALCFlDDiAFnGFSFFQBBE","EEfHALCFlDDiAFnGFSFFQBDN","EEfHALCHSDGQAHOGHjFHlBDx","EEfHALDGSAHQCDNGHjFHlBDx","EEfHALDHnAESGEQCDNFElBAi","EEfHALDHnCElACiGFSFFQBBE","EEfHALDHnCElACiGFSFFQBDN","EEfHALDHnCElGFSACiFFQBBE","EEfHALDHnCElGFSACiFFQBDN","EEfHALFAkAFnDDiCCNGFSBBG","EEfHALFAkAFnDDiCCNGFSBDP","EEfHALFAkAFnDDiGFSCCNBBG","EEfHALFAkAFnDDiGFSCCNBDP","EEfHALFAkAFnGFSDDiCCNBBG","EEfHALFAkAFnGFSDDiCCNBDP","EEfHALFAkDDiAFnCCNGFSBBG","EEfHALFAkDDiAFnCCNGFSBDP","EEfHALFAkDDiAFnGFSCCNBBG","EEfHALFAkDDiAFnGFSCCNBDP","EEfHALFAkDDiCCNAFnGFSBBG","EEfHALFAkDDiCCNAFnGFSBDP","EEfHALFDPCDNDAiAGlGGnBCT"}
            ,{"BFqEFB","BFqEFBAFnFAkGFSHDiCCNDDP","BFqEFBAFnFAkHDiCCNGFSDDP","BFqEFBAFnFAkHDiGFSCCNDDP","BFqEFBAFnFBiHANDDkCCPGFS","BFqEFBAFnFBiHANDDkGFSCCP","BFqEFBAFnFBiHDkCCNGFSDDP","BFqEFBAFnFBiHDkGFSCCNDDP","BFqEFBAFnFCNHAiDDkCCPGFS","BFqEFBAFnFCNHAiDDkGFSCCP","BFqEFBAHSFBiHANCDPDAkGHn","BFqEFBAHSFCNHAiCDPDAkGHn","BFqEFBCEnAESFBiHANGEQDAk","BFqEFBCEnAESFBiHGQGBkDDN","BFqEFBCEnAESFBiHGQGDkDDN","BFqEFBCEnAESFCNGEQHAiDAk","BFqEFBCEnAESFCNHAiGEQDAk","BFqEFBCEnAESFCNHGlGAPDAi","BFqEFBCEnAESFCNHGlGCPDAi","BFqEFBCEnAESFCNHGlGEjDDP","BFqEFBCEnAESGEQHBNDAiFEl","BFqEFBCEnAESGEQHBNFElDAi","BFqEFBCEnAESHGQDGOFElGBi","BFqEFBCEnAESHGQDGOFElGDi","BFqEFBCEnAESHGQFBiGBkDDN","BFqEFBCEnAESHGQFBiGDkDDN","BFqEFBCEnAESHGQFDkGBiDDN","BFqEFBCEnAESHGQFElGBiDDN","BFqEFBCEnAESHGlFAPGBiDDN","BFqEFBCEnAESHGlFCNGAPDAi","BFqEFBCEnAESHGlFCNGCPDAi","BFqEFBCEnAESHGlFCNGEjDDP","BFqEFBCEnAESHGlFFQGBiDDN","BFqEFBCEnAESHGlGAPDBNFEj","BFqEFBCEnAESHGlGBiFFQDDN","BFqEFBCEnDHSHGQAHOFElGBi","BFqEFBCEnDHSHGQAHOFElGDi","BFqEFBCEnFBiAESHANGEQDAk","BFqEFBCEnFBiAESHGQGBkDDN","BFqEFBCEnFBiAESHGQGDkDDN","BFqEFBCEnFBiHANACkGFSDDP","BFqEFBCEnFBiHANAESGEQDAk","BFqEFBCEnFCNAESGEQHAiDAk","BFqEFBCEnFCNAESHAiGEQDAk","BFqEFBCEnFCNAESHGlGAPDAi","BFqEFBCEnFCNAESHGlGCPDAi","BFqEFBCEnFCNAESHGlGEjDDP","BFqEFBCEnFCNHAiACkGFSDDP","BFqEFBCEnFCNHAiAESGEQDAk","BFqEFBCFjDElAFnGCNHHQFGS","BFqEFBCFjDElAFnGCNHHSFFQ","BFqEFBCFjDElAFnHHQFGSGAN","BFqEFBCFjDElAFnHHQFGSGCN","BFqEFBCFjDElAFnHHQGANFGS","BFqEFBCFjDElAFnHHQGCNFGS","BFqEFBCFjDElAFnHHSFFQGAN","BFqEFBCFjDElAFnHHSFFQGCN","BFqEFBCFjDElAFnHHSGCNFFQ","BFqEFBCFjDElGCNAFnHHQFGS","BFqEFBCFjDElGCNAFnHHSFFQ","BFqEFBCFjGCNDElAFnHHQFGS","BFqEFBCFjGCNDElAFnHHSFFQ","BFqEFBCFlAFnGFSHDiFFQDDN","BFqEFBCFlAFnHDiGFSFFQDDN","BFqEFBCFlHDiAFnGFSFFQDDN","BFqEFBCGQHBNDAiAGlGGnFGS","BFqEFBCHSAHQHBNDAiGHlFHn","BFqEFBCHSDGQAHOHFlFHnGBi","BFqEFBCHSDGQAHOHFlFHnGDi","BFqEFBCHSDGQAHOHFlGBiFHn","BFqEFBCHSDGQAHOHFlGDiFHn","BFqEFBCHSDGQAHOHFnFElGBi","BFqEFBCHSDGQAHOHFnFElGDi","BFqEFBCHSDGQHFnAHOFElGBi","BFqEFBCHSDGQHFnAHOFElGDi","BFqEFBCHSFBiHANAHQDAkGHn","BFqEFBCHSFCNAHQHAiDAkGHn","BFqEFBCHSFCNHAiAHQDAkGHn","BFqEFBDElAFnGFSHDiCCNFFQ","BFqEFBDElAFnGFSHDiFFQCCN","BFqEFBDElAFnHDiCCNGFSFFQ","BFqEFBDElAFnHDiGFSCCNFFQ","BFqEFBDElAFnHDiGFSFFQCCN","BFqEFBDElHDiAFnCCNGFSFFQ","BFqEFBDElHDiAFnGFSCCNFFQ","BFqEFBDElHDiAFnGFSFFQCCN","BFqEFBDElHDiCCNAFnGFSFFQ","BFqEFBDGSCHnHGQAHOFElGBi","BFqEFBDGSCHnHGQAHOFElGDi","BFqEFBDHnAESFBiHANGEQCDk","BFqEFBDHnAESFBiHGQGBkCCN","BFqEFBDHnAESFBiHGQGDkCCN","BFqEFBDHnAESFCNGEQHAiCDk","BFqEFBDHnAESFCNHAiGEQCDk","BFqEFBDHnAESFCNHGlGAPCDi","BFqEFBDHnAESFCNHGlGCPCDi","BFqEFBDHnAESFCNHGlGEjCCP","BFqEFBDHnAESGEQHBNFElCDi","BFqEFBDHnAESHGQFBiGBkCCN","BFqEFBDHnAESHGQFBiGDkCCN","BFqEFBDHnAESHGQFDkGBiCCN","BFqEFBDHnAESHGQFElGBiCCN","BFqEFBDHnAESHGlCEjFFQGAN","BFqEFBDHnAESHGlCEjFFQGCN","BFqEFBDHnAESHGlCEjGCNFFQ","BFqEFBDHnAESHGlFAPGBiCCN","BFqEFBDHnAESHGlFCNGAPCDi","BFqEFBDHnAESHGlFCNGCPCDi","BFqEFBDHnAESHGlFCNGEjCCP","BFqEFBDHnAESHGlFFQGBiCCN","BFqEFBDHnAESHGlGBiCCNFFQ","BFqEFBDHnAESHGlGBiFFQCCN","BFqEFBDHnFBiAESHANGEQCDk","BFqEFBDHnFBiAESHGQGBkCCN","BFqEFBDHnFBiAESHGQGDkCCN","BFqEFBDHnFBiHANACkCCPGFS","BFqEFBDHnFBiHANACkGFSCCP","BFqEFBDHnFBiHANAESGEQCDk","BFqEFBDHnFCNAESGEQHAiCDk","BFqEFBDHnFCNAESHAiGEQCDk","BFqEFBDHnFCNAESHGlGAPCDi","BFqEFBDHnFCNAESHGlGCPCDi","BFqEFBDHnFCNAESHGlGEjCCP","BFqEFBDHnFCNHAiACkCCPGFS","BFqEFBDHnFCNHAiACkGFSCCP","BFqEFBDHnFCNHAiAESGEQCDk","BFqEFBFAkAFnGFSHDiCCNDDP","BFqEFBFAkAFnHDiCCNGFSDDP","BFqEFBFAkAFnHDiGFSCCNDDP","BFqEFBFAkHDiAFnCCNGFSDDP","BFqEFBFAkHDiAFnGFSCCNDDP","BFqEFBFAkHDiCCNAFnGFSDDP","BFqEFBFBiAFnHANDDkCCPGFS","BFqEFBFBiAFnHANDDkGFSCCP","BFqEFBFBiAFnHDkCCNGFSDDP","BFqEFBFBiAFnHDkGFSCCNDDP","BFqEFBFBiAHSHANCDPDAkGHn","BFqEFBFBiCEnAESHANGEQDAk","BFqEFBFBiCEnAESHGQGBkDDN","BFqEFBFBiCEnAESHGQGDkDDN","BFqEFBFBiCEnHANACkGFSDDP","BFqEFBFBiCEnHANAESGEQDAk","BFqEFBFBiCFlAFnGFSHANDDP","BFqEFBFBiCFlAFnHANGFSDDP","BFqEFBFBiCFlHANAFnGFSDDP","BFqEFBFBiCHSHANAHQDAkGHn","BFqEFBFBiDElAFnGFSHANCCP","BFqEFBFBiDElAFnHANCCPGFS","BFqEFBFBiDElAFnHANGFSCCP","BFqEFBFBiDElHANAFnCCPGFS","BFqEFBFBiDElHANAFnGFSCCP","BFqEFBFBiDElHANCCPAFnGFS","BFqEFBFBiDHnAESHANGEQCDk","BFqEFBFBiDHnAESHGQGBkCCN","BFqEFBFBiDHnAESHGQGDkCCN","BFqEFBFBiDHnHANACkCCPGFS","BFqEFBFBiDHnHANACkGFSCCP","BFqEFBFBiDHnHANAESGEQCDk","BFqEFBFBiGBkAFnCCNHHSDDP","BFqEFBFBiGBkAFnHHSCCNDDP","BFqEFBFBiGBkCCNAFnHHSDDP","BFqEFBFBiHANACkCCPDEnGFS","BFqEFBFBiHANACkDEnCCPGFS","BFqEFBFBiHANACkDEnGFSCCP","BFqEFBFBiHANAFnDDkCCPGFS","BFqEFBFBiHANAFnDDkGFSCCP","BFqEFBFBiHANAHSCDPDAkGHn","BFqEFBFBiHANCEnACkGFSDDP","BFqEFBFBiHANCEnAESGEQDAk","BFqEFBFBiHANCFlAFnGFSDDP","BFqEFBFBiHANCHSAHQDAkGHn","BFqEFBFBiHANDDkAFnCCPGFS","BFqEFBFBiHANDDkAFnGFSCCP","BFqEFBFBiHANDDkCCPAFnGFS","BFqEFBFBiHANDElAFnCCPGFS","BFqEFBFBiHANDElAFnGFSCCP","BFqEFBFBiHANDElCCPAFnGFS","BFqEFBFBiHANDHnACkCCPGFS","BFqEFBFBiHANDHnACkGFSCCP","BFqEFBFBiHANDHnAESGEQCDk","BFqEFBFBiHDkAFnCCNGFSDDP","BFqEFBFBiHDkAFnGFSCCNDDP","BFqEFBFBiHDkCCNAFnGFSDDP","BFqEFBFCNAFnHAiDDkCCPGFS","BFqEFBFCNAFnHAiDDkGFSCCP","BFqEFBFCNAHSHAiCDPDAkGHn","BFqEFBFCNCEnAESGEQHAiDAk","BFqEFBFCNCEnAESHAiGEQDAk","BFqEFBFCNCEnAESHGlGAPDAi","BFqEFBFCNCEnAESHGlGCPDAi","BFqEFBFCNCEnAESHGlGEjDDP","BFqEFBFCNCEnHAiACkGFSDDP","BFqEFBFCNCEnHAiAESGEQDAk","BFqEFBFCNCHSAHQHAiDAkGHn","BFqEFBFCNCHSHAiAHQDAkGHn","BFqEFBFCNDHnAESGEQHAiCDk","BFqEFBFCNDHnAESHAiGEQCDk","BFqEFBFCNDHnAESHGlGAPCDi","BFqEFBFCNDHnAESHGlGCPCDi","BFqEFBFCNDHnAESHGlGEjCCP","BFqEFBFCNDHnHAiACkCCPGFS","BFqEFBFCNDHnHAiACkGFSCCP","BFqEFBFCNDHnHAiAESGEQCDk","BFqEFBFCNHAiACkCCPDEnGFS","BFqEFBFCNHAiACkDEnCCPGFS","BFqEFBFCNHAiACkDEnGFSCCP","BFqEFBFCNHAiAFnDDkCCPGFS","BFqEFBFCNHAiAFnDDkGFSCCP","BFqEFBFCNHAiAHSCDPDAkGHn","BFqEFBFCNHAiCEnACkGFSDDP","BFqEFBFCNHAiCEnAESGEQDAk","BFqEFBFCNHAiCFlAFnGFSDDP","BFqEFBFCNHAiCHSAHQDAkGHn","BFqEFBFCNHAiDDkAFnCCPGFS","BFqEFBFCNHAiDDkAFnGFSCCP","BFqEFBFCNHAiDDkCCPAFnGFS","BFqEFBFCNHAiDElAFnCCPGFS","BFqEFBFCNHAiDElAFnGFSCCP","BFqEFBFCNHAiDElCCPAFnGFS","BFqEFBFCNHAiDHnACkCCPGFS","BFqEFBFCNHAiDHnACkGFSCCP","BFqEFBFCNHAiDHnAESGEQCDk","BFqEFBFCNHEjDElAFnCCPGFS","BFqEFBFCNHEjDElAFnGFSCCP","BFqEFBFCNHEjDElCCPAFnGFS","BFqEFBGBiCCNDElAFnHHQFGS","BFqEFBGBiCCNDElAFnHHSFFQ","BFqEFBGBiDElAFnCCNHHQFGS","BFqEFBGBiDElAFnCCNHHSFFQ","BFqEFBGBiDElAFnHHQCCNFGS","BFqEFBGBiDElAFnHHQFGSCCN","BFqEFBGBiDElAFnHHSCCNFFQ","BFqEFBGBiDElAFnHHSFFQCCN","BFqEFBGBiDElCCNAFnHHQFGS","BFqEFBGBiDElCCNAFnHHSFFQ","BFqEFBHBNCGQDAiAGlGGnFGS","BFqEFBHBNDAiCGQAGlGGnFGS","BFqEFBHDiCCNDElAFnGFSFFQ","BFqEFBHDiDElAFnCCNGFSFFQ","BFqEFBHDiDElAFnGFSCCNFFQ","BFqEFBHDiDElAFnGFSFFQCCN","BFqEFBHDiDElCCNAFnGFSFFQ"}
            ,{"FCLEBx","FCLEBxAESGEQHCkDBNCAiBBg"}
            ,{"EEfFAm","EEfFAmAESGEQHCkCBiDCNBCL"}
            // the level 4 difficulty, given 3 starting pieces
            ,{"FDNCGQBAk","FDNCGQBAkGGnEDIHCiAALDBg", "FDNCGQBAkGGnHCiAALDBgEDI","FDNCGQBAkGGnHCiAALEDIDBg", "FDNCGQBAkGGnHCiEDIAALDBg", "FDNCGQBAkHCiAALDBgGGnEDI", "FDNCGQBAkHCiAALGGnDBgEDI", "FDNCGQBAkHCiAALGGnEDIDBg", "FDNCGQBAkHCiGGnAALDBgEDI", "FDNCGQBAkHCiGGnAALEDIDBg", "FDNCGQBAkHCiGGnEDIAALDBg"},
            {"CEQEHuGEO","CEQEHuGEOBDxFGSHCiAALDBg","CEQEHuGEOBDxHCiAALDBgFGS","CEQEHuGEOBDxHCiAALFGSDBg", "CEQEHuGEOBDxHCiFGSAALDBg", "CEQEHuGEOHCiAALBDxDBgFGS", "CEQEHuGEOHCiAALBDxFGSDBg", "CEQEHuGEOHCiAALDBgBDxFGS", "CEQEHuGEOHCiBDxAALDBgFGS", "CEQEHuGEOHCiBDxAALFGSDBg", "CEQEHuGEOHCiBDxFGSAALDBg"},
            {"DFOGGQEDI","DFOGGQEDIBAkFHnHCiAALCAg", "DFOGGQEDIBAkHCiAALCAgFHn", "DFOGGQEDIBAkHCiAALFHnCAg", "DFOGGQEDIBAkHCiFHnAALCAg", "DFOGGQEDICAkFHnHCiAALBBg", "DFOGGQEDICAkHCiAALBBgFHn", "DFOGGQEDICAkHCiAALFHnBBg", "DFOGGQEDICAkHCiFHnAALBBg", "DFOGGQEDIFHnCAkHCiAALBBg"},
            {"EGOCGQGGS","EGOCGQGGSFEnBAkHCiAALDBg", "EGOCGQGGSFEnHBLADgDAiBAk", "EGOCGQGGSHBLADgDAiFEnBAk", "EGOCGQGGSHBLADgFEnDAiBAk", "EGOCGQGGSHBLFEnADgDAiBAk"},
            {"CGOGGQEDI","CGOGGQEDIBAkFHnHCiAALDBg", "CGOGGQEDIBAkHCiAALDBgFHn", "CGOGGQEDIBAkHCiAALFHnDBg", "CGOGGQEDIBAkHCiFHnAALDBg", "CGOGGQEDIHBLADgDAiBAkFHn"},
            {"GFSEAoBBG","GFSEAoBBGFCLHBNADgDAiCDk","GFSEAoBBGFDNCAkHCiAALDBg", "GFSEAoBBGFDNHBLADgDAiCDk"},
            {"DFQFDNGGS","DFQFDNGGSBAmCAkHCiAALEAg", "DFQFDNGGSEBxCAkHCiAALBBg", "DFQFDNGGSEHwCAkHCiAALBBg"},
            {"GHSEAoBBG","GHSEAoBBGFCLHBNADgDAiCDk", "GHSEAoBBGFDNCAkHCiAALDBg", "GHSEAoBBGFDNHBLADgDAiCDk"},
            {"EGOCGQGEn","EGOCGQGEnBAkFGSHCiAALDBg","EGOCGQGEnBAkHCiAALDBgFGS","EGOCGQGEnBAkHCiAALFGSDBg", "EGOCGQGEnBAkHCiFGSAALDBg", "EGOCGQGEnBCTFElHBLADgDAi", "EGOCGQGEnBCTFElHCiAALDBg", "EGOCGQGEnBCTHBLADgDAiFEl", "EGOCGQGEnBCTHBLADgFElDAi", "EGOCGQGEnBCTHBLFElADgDAi", "EGOCGQGEnFElBCTHBLADgDAi", "EGOCGQGEnFElBCTHCiAALDBg", "EGOCGQGEnFElHBLADgBCTDAi", "EGOCGQGEnFElHBLADgDAiBCT", "EGOCGQGEnFElHBLBCTADgDAi", "EGOCGQGEnFElHCiAALBCTDBg", "EGOCGQGEnFElHCiAALDBgBCT", "EGOCGQGEnFElHCiBCTAALDBg", "EGOCGQGEnFGSBAkHCiAALDBg", "EGOCGQGEnFGSHBLADgDAiBAk", "EGOCGQGEnHBLADgBCTDAiFEl", "EGOCGQGEnHBLADgBCTFElDAi", "EGOCGQGEnHBLADgDAiBAkFGS", "EGOCGQGEnHBLADgDAiBCTFEl", "EGOCGQGEnHBLADgDAiFElBCT", "EGOCGQGEnHBLADgDAiFGSBAk", "EGOCGQGEnHBLADgFElBCTDAi" , "EGOCGQGEnHBLADgFElDAiBCT" , "EGOCGQGEnHBLADgFGSDAiBAk" , "EGOCGQGEnHBLBCTADgDAiFEl" , "EGOCGQGEnHBLBCTADgFElDAi" , "EGOCGQGEnHBLBCTFElADgDAi", "EGOCGQGEnHBLFElADgBCTDAi", "EGOCGQGEnHBLFElADgDAiBCT", "EGOCGQGEnHBLFElBCTADgDAi", "EGOCGQGEnHBLFGSADgDAiBAk"},
            {"DFOGGQBDx","DFOGGQBDxCAkFGSHCiAALEAg", "DFOGGQBDxCAkHCiAALEAgFGS", "DFOGGQBDxCAkHCiAALFGSEAg", "DFOGGQBDxCAkHCiFGSAALEAg", "DFOGGQBDxFGSCAkHCiAALEAg"}

            // the level 3 difficulty, given 4 starting pieces
            ,{"BGKEGOCGQAGl","BGKEGOCGQAGlGGnFGSHCiDBg","BGKEGOCGQAGlGGnHCiDBgFGS", "BGKEGOCGQAGlGGnHCiFGSDBg", "BGKEGOCGQAGlHCiDBgGGnFGS", "BGKEGOCGQAGlHCiGGnDBgFGS", "BGKEGOCGQAGlHCiGGnFGSDBg"},
            {"BHFFCLHBNAGl","BHFFCLHBNAGlCAiDBgGGnEDI", "BHFFCLHBNAGlCAiGGnDBgEDI", "BHFFCLHBNAGlCAiGGnEDIDBg", "BHFFCLHBNAGlGGnCAiDBgEDI", "BHFFCLHBNAGlGGnCAiEDIDBg", "BHFFCLHBNAGlGGnEDICAiDBg"}
            ,{"CHSFCLAHQHBN","CHSFCLAHQHBNBFqDAiGHlEAo","CHSFCLAHQHBNEAgDAiGHlBDx"}
            ,{"FBmBEeCEjABR","FBmBEeCEjABRDCPHCNGBgEBL"}
            ,{"FCLBHFGEnEDI","FCLBHFGEnEDIHBNADgDAiCDk"}
            ,{"BGSAHQCHlHGj","BGSAHQCHlHGjDCNFHnGBgEBL","BGSAHQCHlHGjDCNGBgEBLFHn","BGSAHQCHlHGjDCNGBgFHnEBL","BGSAHQCHlHGjFHnDCNGBgEBL","BGSAHQCHlHGjFHnGBgDCNEBL","BGSAHQCHlHGjGBgDCNEBLFHn","BGSAHQCHlHGjGBgDCNFHnEBL","BGSAHQCHlHGjGBgFHnDCNEBL"}
            ,{"EEfHALACiDEl","EEfHALACiDElBDxCCNGFSFFQ","EEfHALACiDElBDxGFSCCNFFQ","EEfHALACiDElBDxGFSFFQCCN","EEfHALACiDElCCNBDPGGnFGS","EEfHALACiDElCCNBDxGFSFFQ","EEfHALACiDElCCNBFQGGnFGS","EEfHALACiDElCCNGFQFHSBDx","EEfHALACiDElCCNGFSBBGFHn","EEfHALACiDElCCNGFSBDPFHn","EEfHALACiDElCCNGFSBDxFFQ","EEfHALACiDElCCNGFSFFQBDx","EEfHALACiDElCCNGFSFHnBBG","EEfHALACiDElCCNGFSFHnBDP","EEfHALACiDElCCNGGnBCTFFQ","EEfHALACiDElCCNGGnBDPFGS","EEfHALACiDElCCNGHSBBGFHn","EEfHALACiDElCCNGHSBDPFHn","EEfHALACiDElCCNGHSBDxFFQ","EEfHALACiDElCCNGHSFFQBDx","EEfHALACiDElCCNGHSFHnBBG","EEfHALACiDElCCNGHSFHnBDP","EEfHALACiDElCFQBBEGGnFGS","EEfHALACiDElCFQBDNGGnFGS","EEfHALACiDElCFQFFOGGnBCT","EEfHALACiDElCFQGGnBBEFGS","EEfHALACiDElCFQGGnBCTFFO","EEfHALACiDElCFQGGnBDNFGS","EEfHALACiDElCFQGGnFFOBCT","EEfHALACiDElCFQGGnFGSBBE","EEfHALACiDElCFQGGnFGSBDN","EEfHALACiDElGFQCCNFHSBDx","EEfHALACiDElGFQFHSBDxCCN","EEfHALACiDElGFQFHSCCNBDx","EEfHALACiDElGFSBDxCCNFFQ","EEfHALACiDElGFSBDxFFQCCN","EEfHALACiDElGFSCCNBBGFHn","EEfHALACiDElGFSCCNBDPFHn","EEfHALACiDElGFSCCNBDxFFQ","EEfHALACiDElGFSCCNFFQBDx","EEfHALACiDElGFSCCNFHnBBG","EEfHALACiDElGFSCCNFHnBDP","EEfHALACiDElGFSFFQBDxCCN","EEfHALACiDElGFSFFQCCNBDx","EEfHALACiDElGFSFHnCCNBBG","EEfHALACiDElGFSFHnCCNBDP","EEfHALACiDElGGnBCTCCNFFQ","EEfHALACiDElGGnBCTFFQCCN","EEfHALACiDElGGnCCNBCTFFQ","EEfHALACiDElGGnCCNBDPFGS","EEfHALACiDElGHSBDxCCNFFQ","EEfHALACiDElGHSBDxFFQCCN","EEfHALACiDElGHSCCNBBGFHn","EEfHALACiDElGHSCCNBDPFHn","EEfHALACiDElGHSCCNBDxFFQ","EEfHALACiDElGHSCCNFFQBDx","EEfHALACiDElGHSCCNFHnBBG","EEfHALACiDElGHSCCNFHnBDP","EEfHALACiDElGHSFFQBDxCCN","EEfHALACiDElGHSFFQCCNBDx","EEfHALACiDElGHSFHnCCNBBG","EEfHALACiDElGHSFHnCCNBDP"}
            ,{"GFSEAoBBGFDN","GFSEAoBBGFDNCAkHCiAALDBg","GFSEAoBBGFDNHBLADgDAiCDk"}
            ,{"EGOCGQGGSHBL","EGOCGQGGSHBLADgDAiFEnBAk","EGOCGQGGSHBLADgFEnDAiBAk","EGOCGQGGSHBLFEnADgDAiBAk"}
            ,{"CEQEHuGEOHCi","CEQEHuGEOHCiAALBDxDBgFGS","CEQEHuGEOHCiAALBDxFGSDBg","CEQEHuGEOHCiAALDBgBDxFGS","CEQEHuGEOHCiBDxAALDBgFGS","CEQEHuGEOHCiBDxAALFGSDBg","CEQEHuGEOHCiBDxFGSAALDBg"}

            // the level 2 difficulty, given 5 starting pieces
            ,{"CHSAHQGFjHCNBGK","CHSAHQGFjHCNBGKDBgFHlEAo", "CHSAHQGFjHCNBGKFHlDBgEAo", "CHSAHQGFjHCNBGKFHlEAoDBg"},
            {"GDLADgHAiEFFCGc","GDLADgHAiEFFCGcDAkBDxFGS"},
            {"BGKEGOCGQAGlGGn","BGKEGOCGQAGlGGnFGSHCiDBg","BGKEGOCGQAGlGGnHCiDBgFGS","BGKEGOCGQAGlGGnHCiFGSDBg"},
            {"BGSAHQCHlHGjDCN","BGSAHQCHlHGjDCNFHnGBgEBL","BGSAHQCHlHGjDCNGBgEBLFHn","BGSAHQCHlHGjDCNGBgFHnEBL"},
            {"CHSFCLDGQAHOHFl","CHSFCLDGQAHOHFlBDxEBtGAg","CHSFCLDGQAHOHFlBDxEBtGCg","CHSFCLDGQAHOHFlBDxEHsGAg","CHSFCLDGQAHOHFlBDxEHsGCg","CHSFCLDGQAHOHFlBDxGCgEBt","CHSFCLDGQAHOHFlBDxGCgEDi","CHSFCLDGQAHOHFlBFqEAoGBi","CHSFCLDGQAHOHFlBFqEAoGDi","CHSFCLDGQAHOHFlBFqGBiEAo","CHSFCLDGQAHOHFlBFqGDiEAo","CHSFCLDGQAHOHFlEAoBFqGBi","CHSFCLDGQAHOHFlEAoBFqGDi","CHSFCLDGQAHOHFlEAoGCgBAi","CHSFCLDGQAHOHFlEBtBDxGAg","CHSFCLDGQAHOHFlEBtBDxGCg","CHSFCLDGQAHOHFlEBtGAgBDx","CHSFCLDGQAHOHFlEBtGCgBDx","CHSFCLDGQAHOHFlEHsBDxGAg","CHSFCLDGQAHOHFlEHsBDxGCg","CHSFCLDGQAHOHFlEHsGAgBDx","CHSFCLDGQAHOHFlEHsGCgBDx","CHSFCLDGQAHOHFlGCgBAiEAo","CHSFCLDGQAHOHFlGCgBDxEBt","CHSFCLDGQAHOHFlGCgBDxEDi","CHSFCLDGQAHOHFlGCgEAoBAi","CHSFCLDGQAHOHFlGCgEBtBDx","CHSFCLDGQAHOHFlGCgEDiBDx"},
            {"BFqEFBCEnAESFBi","BFqEFBCEnAESFBiHANGEQDAk","BFqEFBCEnAESFBiHGQGBkDDN","BFqEFBCEnAESFBiHGQGDkDDN"},
            {"BGSAHQCHlHGjFHn","BGSAHQCHlHGjFHnDCNGBgEBL","BGSAHQCHlHGjFHnGBgDCNEBL"},
            {"FCLEBxAESGEQHCk","FCLEBxAESGEQHCkDBNCAiBBg"},
            {"FBmBEeABREEfHCP","FBmBEeABREEfHCPGBiDCNCBL"},
            {"DFQFDNGGSBAmCAk","DFQFDNGGSBAmCAkHCiAALEAg"}

            // the level 1 difficulty, given 6 starting pieces
            ,{"DFOCGQGDLADgHFjBGS","DFOCGQGDLADgHFjBGSFHlEAo"},
            {"HBLADgBHnCGODAiGEl","HBLADgBHnCGODAiGElFGQEDI"},
            {"DFOGGQEHuBDxFGSHCi","DFOGGQEHuBDxFGSHCiAALCAg"},
            {"FCLBHFGCgCDNDAiAGl","FCLBHFGCgCDNDAiAGlHESEAo", "FCLBHFGCgCDNDAiAGlHEnEDI"},
            {"CEQEHuGEOHCiAALBDx","CEQEHuGEOHCiAALBDxDBgFGS","CEQEHuGEOHCiAALBDxFGSDBg"},
            {"FDNCGQBAkGGnHCiAAL","FDNCGQBAkGGnHCiAALDBgEDI", "FDNCGQBAkGGnHCiAALEDIDBg"},
            {"CGOGGQEDIBAkHCiFHn","CGOGGQEDIBAkHCiFHnAALDBg"},
            {"EEfHALACiDElBDxGFS","EEfHALACiDElBDxGFSCCNFFQ","EEfHALACiDElBDxGFSFFQCCN"},
            {"BHFFCLHBNAGlGGnEDI","BHFFCLHBNAGlGGnEDICAiDBg"},
            {"EEfHALACiCCNDElGHS","EEfHALACiCCNDElGHSBBGFHn","EEfHALACiCCNDElGHSBDPFHn","EEfHALACiCCNDElGHSBDxFFQ","EEfHALACiCCNDElGHSFFQBDx","EEfHALACiCCNDElGHSFHnBBG","EEfHALACiCCNDElGHSFHnBDP"}
};

    /* we define a new location that is contains the location information on the board,
    for each int[], the first is location char information and the second and third are the coordinates.
     */
    private final static int[][] location= {{65, 110, 60} /* A */,{65 + 1, 110 + 40 , 60},{65 + 2, 110 + 40 * 2, 60 }, {65 + 3, 110 + 40 * 3, 60},
            {65 + 4, 110 + 40 * 4, 60},{65 + 5, 110 + 40 * 5, 60},{65 + 6, 110 + 40 * 6, 60},{65 + 7, 110 + 40 * 7, 60 },
            {65 + 8, 110 + 40 * 8, 60},{65 + 9, 110 + 40 * 9, 60 }, // first row //
            //second row... start with K....
            {65 + 10, 110 , 60 + 40 },{65 + 11, 110 + 40, 60 + 40 },{65 + 12, 110 + 40 * 2, 60 + 40 },{65 + 13, 110 + 40 * 3, 60 + 40 },
            {65 + 14, 110 + 40 * 4, 60 + 40 },{65 + 15, 110 + 40 * 5, 60 + 40 },{65 + 16, 110 + 40 * 6, 60 + 40 },{65 + 17, 110 + 40 * 7, 60 + 40 },
            {65 + 18, 110 + 40 * 8, 60 + 40 },{65 + 19, 110 + 40 * 9, 60 + 40 },
            // the third row..... start with U.....
            {65 + 20, 110, 60 + 40 * 2 },{65 + 21, 110 + 40 , 60 + 40 * 2}, {65 + 22, 110 + 40 * 2, 60 + 40 * 2}, {65 + 23, 110 + 40 * 3 , 60 + 40 * 2}, {65 + 24, 110 + 40 * 4, 60 + 40 * 2},
            // the next half location....
            {97,110 + 40 * 5, 60 + 40 * 2 }, {98,110 + 40 * 6, 60 + 40 * 2 },{99,110 + 40 * 7, 60 + 40 * 2 },{100,110 + 40 * 8, 60 + 40 * 2 },{101,110 + 40 * 9, 60 + 40 * 2 },
            // the fourth row of the board.....
            {102,110, 60 + 40 * 3 }, {103,110 + 40, 60 + 40 * 3 },{104,110+40 * 2, 60 + 40 * 3 }, {105,110 +40 * 3, 60 + 40 * 3 }, {106,110 +40 * 4, 60 + 40 * 3 },
            {107,110 + 40 * 5, 60 + 40 * 3 }, {108, 110 + 40 * 6, 60 + 40 * 3 },{109,110+40 *7, 60 + 40 * 3 }, {110, 110 +40 * 8, 60 + 40 * 3 }, {111,110 +40 * 9, 60 + 40 * 3 },
            // the last row of the board.....
            {112,110, 60 + 40 * 4 }, {113,110 + 40, 60 + 40 * 4 },{114,110+40 * 2, 60 + 40 * 4 }, {115,110 +40 * 3, 60 + 40 * 4 }, {116,110 +40 * 4, 60 + 40 * 4 },
            {117,110 + 40 * 5, 60 + 40 * 4 }, {118,110 + 40 * 6, 60 + 40 * 4 },{119,110+40 *7, 60 + 40 * 4 }, {120, 110 +40 * 8, 60 + 40 * 4 }, {121,110 +40 * 9, 60 + 40 * 4}
};

    //inner class here
    public class Pieces {

        // The class has been defined here, which including all the information we need in the next stage..

        public char piece; // from char A to H, which means the shape.
        public  char orientation;  // from char A to H, which means the orientation of the piece.
        public char location; // the position information for pieces, means where we put the piece.
        public Pieces(char piece, char orientation, char location){
            this.piece = piece;
            this.orientation = orientation;
            this.location = location;
        }

        public char getPiece(){
            return  this.piece;
        }

        public String GetPO(){
            return ""+piece+orientation;
        }

    }

    //node

    private final Group root = new Group();
    private final Group pieces = new Group();
    private final Group controls = new Group();
    private final Group Hit = new Group();
    private final Group Text = new Group();
    private final Group Finish = new Group();
    private final Group instruction = new Group();

    /*The difficulty slider */

    private final Slider difficulty =  new Slider();

    /* once the piece is placed into board, NotRotate became true.*/

    private class Piece extends ImageView {
        boolean pin = false; // Not allowed to drag, when there is a piece cover another piece.
        boolean NotRotate = false; // not allowed to rotate and flip when the pieces are placed into board

        //avoid picking up after the current one is covered by previous one
        Pieces boardPiece; // Pieces class is used here...
        double MouseX;
        double MouseY;

        // constructor

        public Piece(Pieces boardPiece, boolean draw) {

            // the boolean here is used to generate task 8, the piece already placed in the board are not allowed to drag, press.

            this.boardPiece = boardPiece;

            /*set pictures smaller*/

            setScaleX(0.53);
            setScaleY(0.53);
            if (draw) { // draw the piece on the two sides of the window.
                if (this.boardPiece.piece == 'A' || this.boardPiece.piece == 'B' || this.boardPiece.piece == 'C' || this.boardPiece.piece == 'D') {
                    Image photo = new Image(Viewer.class.getResource(URI_BASE + boardPiece.piece+ 'A' + ".png").toString());
                    setImage(photo); // add the photo to the window...
                    setLayoutX(-50);
                    setLayoutY((this.boardPiece.piece - 'A') * PIECE_IMAGE_SIZE - 50);

                }
                if (this.boardPiece.piece == 'E' || this.boardPiece.piece == 'F' || this.boardPiece.piece == 'G' || this.boardPiece.piece == 'H') {
                    Image photo = new Image(Viewer.class.getResource(URI_BASE + boardPiece.piece+ 'A' + ".png").toString());
                    setImage(photo); // add the photo to the window...
                    setLayoutX(700);
                    setLayoutY((this.boardPiece.piece - 'E') * PIECE_IMAGE_SIZE - 50);
                }
            }
            if (! draw) { // draw the pieces and place the pieces on the board when the game are generate
                char info = this.boardPiece.orientation;
                if(info >= 'E' && info <= 'H') {
                    int i = this.boardPiece.orientation - 'E';
                    setImage(new Image(Board.class.getResource(URI_BASE + this.boardPiece.piece + 'E' + ".png").toString()));
                    for (int m = 0; m < i; m++) {
                        rotate();
                    } // insert the pieces and rotate to the target orientation.
                    for (int[] location : location) {
                        if (((int) this.boardPiece.location == location[0])) {
                            setLayoutX(location[1]);
                            setLayoutY(location[2]);
                        }
                }
            } else if (info >= 'A' && info <= 'D') {
                char One = this.boardPiece.orientation;
                int i = One - 'A';
                setImage(new Image(Board.class.getResource(URI_BASE + this.boardPiece.piece + 'A' + ".png").toString()));
                for (int m = 0; m < i; m++) {
                    rotate();
                }
                for (int[] location : location) {
                    if (((int) this.boardPiece.location == location[0])) {
                        setLayoutX(location[1]);
                        setLayoutY(location[2]);
                    }
                }
                }
            }
            /* Only allow two sides of the pieces drag, press and flip.*/
            if (draw) {

                setOnMousePressed(event -> {
                    setOpacity(0.7);
            /* the code below is used to flip the piece and update the piece shape state when right clicked the mouse.*/
                    if (event.isSecondaryButtonDown() && (!event.isPrimaryButtonDown())) {
                        /*boolean NotRotate not allow flip and rotate the piece */
                        if (!NotRotate) {
                            char info = this.boardPiece.orientation;
                            if (info >= 'E' && info <= 'H') {
                                this.boardPiece.orientation -= 4;// update the orientation every time
                                int i = this.boardPiece.orientation - 'A';
                                setImage(new Image(Board.class.getResource(URI_BASE + this.boardPiece.piece + 'A' + ".png").toString()));
                                for (int m = 0; m < i; m++) {
                                    rotate();
                                }
                            } else if (info >= 'A' && info <= 'D') {
                                this.boardPiece.orientation += 4; // update the orientation every time
                                char One = this.boardPiece.orientation;
                                int i = One - 'E';
                                setImage(new Image(Board.class.getResource(URI_BASE + this.boardPiece.piece + 'E' + ".png").toString()));
                                for (int m = 0; m < i; m++) {
                                    rotate();
                                }
                            }
                        }
                    }
                    this.pin = false; //back to original for check before start for this piece.
                    if (getLayoutX() >= 110 - 30 && getLayoutX() <= 110 + 40 * 9 + 30 && getLayoutY() >= 60 - 30 && getLayoutY() <= 60 + 40 * 4 + 30) {
                        // to make sure the pieces in the board
                        double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110;
                        double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
                        if (!(StepsGame.isPlacementSequenceValid(update() + this.boardPiece.GetPO() + GetLocation(NewX, NewY)))) {
                            this.pin = true; // Which means is can not drag out the piece when there is another piece on it.
                        }
                    }
                    this.toFront();
                    this.MouseX = event.getSceneX(); // this is the coordinate X from the window scene
                    this.MouseY = event.getSceneY();// this is the coordinate X from the window scene
                });
                setOnScroll(event -> {
                    rotate(); // rotate the pieces
                });
                setOnMouseDragged(event -> {
                    if (this.pin) {
                        return; // Stop this event handling when the the piece was covered.
                    }
                    if (event.isPrimaryButtonDown()) {
                        double moveX = event.getSceneX() - this.MouseX;
                        //sceneX and SceneY are the coordinate in the window and SceneX and SceneY are all 0 in the top left of the window.
                        double moveY = event.getSceneY() - this.MouseY;
                        this.setLayoutX(getLayoutX() + moveX);
                        this.setLayoutY(getLayoutY() + moveY);
                        MouseX = event.getSceneX();
                        MouseY = event.getSceneY();
                    }
                });

                /* different shape can be placed into different location, for (B, E) shape, two sides might be placed.

                Therefore, different situations are discussed below */

                setOnMouseReleased(event -> {
                    setOpacity(1.0);
                    if (this.pin) {
                        return; // when covered, the event handing here is over.
                    }
                    processing = update(); // This step is created because of the bugs casued by the drag the same one the board to update the board state.
                    finish();
                    if ((!(this.boardPiece.piece == 'B' || this.boardPiece.piece == 'E')) && ((this.boardPiece.orientation == 'A') || (this.boardPiece.orientation == 'B') ||
                            (this.boardPiece.orientation == 'C') || (this.boardPiece.orientation == 'D'))) {
                        if (getLayoutX() >= 110 + 40 - 30 && getLayoutX() <= 110 + 8 * 40 + 30 && getLayoutY() >= 60 + 40 - 30 && getLayoutY() <= 60 + 40 * 3 + 30) {
                            int x = (int) Math.round((getLayoutX() - 110) / SQUARE_SIZE);
                            int y = (int) Math.round((getLayoutY() - (60)) / SQUARE_SIZE);
                            if ((x % 2 == 1 && y % 2 == 1) || (x % 2 == 0 && y % 2 == 0)) {
                                double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110; // The top left one coordinate is (0,0)
                                double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
//                            processing = processing + this.boardPiece.GetPO()+ GetLocation(NewX, NewY); // add the new one for the board if it is added on the board
                                if (StepsGame.isPlacementSequenceValid(processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY))) {
                                    setLayoutX(NewX);
                                    setLayoutY(NewY);
                                    processing = processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY);
                                    finish();
                                    NotRotate = true;
                                } else {
                                    clear();
                                    NotRotate = false;
                                }
                            } else {
                                // to let the piece flip when it is magnifying..
                                // clear the image which is not satisfy the condition to place on the board
                                clear();
                                NotRotate = false;
                            }
                        } else {
                            clear();
                            NotRotate = false;
                        }
                    }
                    if ((this.boardPiece.piece == 'B' && this.boardPiece.orientation == 'A') ||
                            (this.boardPiece.piece == 'E' && this.boardPiece.orientation == 'C')) {
                        if (getLayoutX() >= 110 - 30 && getLayoutX() <= 110 + 8 * 40 + 30 && getLayoutY() >= 60 + 40 - 30 && getLayoutY() <= 60 + 40 * 3 + 30) {
                            // the LayoutX and LayoutY for top left is (110, 60)
                            int x = (int) Math.round((getLayoutX() - 110) / SQUARE_SIZE);
                            int y = (int) Math.round((getLayoutY() - (60)) / SQUARE_SIZE);
                            if ((x % 2 == 1 && y % 2 == 1) || (x % 2 == 0 && y % 2 == 0)) {
                                // this is to limit the piece place into peg
                                double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110;
                                double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
                                if (StepsGame.isPlacementSequenceValid(processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY))) {
                                    // this is used to limit the covered piece can not be dragged out.
                                    // when all conditions are satisfied, the peices can be snap into the board. The discussion below are same structure.
                                    setLayoutX(NewX);
                                    setLayoutY(NewY);
                                    processing = processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY);
                                    NotRotate = true;
                                    finish();
                                } else {
                                    clear();
                                    NotRotate = false;
                                }
                            } else {
                                // to let the piece flip when it is magnifying..
                                // clear the image which is not satisfy the condition to place on the board
                                clear();
                                NotRotate = false;
                            }
                        } else {
                            clear();
                            NotRotate = false;
                        }
                    }
                    if ((this.boardPiece.piece == 'B' && this.boardPiece.orientation == 'B') ||
                            (this.boardPiece.piece == 'E' && this.boardPiece.orientation == 'D')) {
                        if (getLayoutX() >= 90 && getLayoutX() <= 100 + 120 * 4 && getLayoutY() >= 60 - 30 && getLayoutY() <= 60 + 3 * 40 + 30) {
                            int x = (int) Math.round((getLayoutX() - 110) / SQUARE_SIZE);
                            int y = (int) Math.round((getLayoutY() - (60)) / SQUARE_SIZE);
                            if ((x % 2 == 1 && y % 2 == 1) || (x % 2 == 0 && y % 2 == 0)) {
                                double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110;
                                double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
                                if (StepsGame.isPlacementSequenceValid(processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY))) {
                                    setLayoutX(NewX);
                                    setLayoutY(NewY);
                                    processing = processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY);
                                    finish();
                                    NotRotate = true;
                                } else {
                                    clear();
                                    NotRotate = false;
                                }
                            } else {
                                // to let the piece flip when it is magnifying..
                                // clear the image which is not satisfy the condition to place on the board
                                clear();
                                NotRotate = false;
                            }
                        } else {
                            clear();
                            NotRotate = false;
                        }
                    }
                    if ((this.boardPiece.piece == 'B' && this.boardPiece.orientation == 'C') ||
                            (this.boardPiece.piece == 'E' && this.boardPiece.orientation == 'A')) {
                        if (getLayoutX() >= 110 + 40 - 30 && getLayoutX() <= 110 + 40 * 9 + 30 && getLayoutY() >= 60 + 40 - 30 && getLayoutY() <= 60 + 40 * 3 + 30) {
                            int x = (int) Math.round((getLayoutX() - 110) / SQUARE_SIZE);
                            int y = (int) Math.round((getLayoutY() - (60)) / SQUARE_SIZE);
                            if ((x % 2 == 1 && y % 2 == 1) || (x % 2 == 0 && y % 2 == 0)) {
                                double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110;
                                double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
                                if (StepsGame.isPlacementSequenceValid(processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY))) {
                                    setLayoutX(NewX);
                                    setLayoutY(NewY);
                                    processing = processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY);
                                    finish();
                                    NotRotate = true;
                                } else {
                                    clear();
                                    NotRotate = false;
                                }
                            } else {
                                // to let the piece flip when it is magnifying..
                                // clear the image which is not satisfy the condition to place on the board
                                clear();
                                NotRotate = false;
                            }
                        } else {
                            clear();
                            NotRotate = false;
                        }
                    }
                    if ((this.boardPiece.piece == 'B' && this.boardPiece.orientation == 'D') ||
                            (this.boardPiece.piece == 'E' && this.boardPiece.orientation == 'B')) {
                        if (getLayoutX() >= 110 + 40 - 30 && getLayoutX() <= 110 + 40 * 8 + 30 && getLayoutY() >= 60 + 40 - 30 && getLayoutY() <= 60 + 40 * 4 + 30) {
                            int x = (int) Math.round((getLayoutX() - 110) / SQUARE_SIZE);
                            int y = (int) Math.round((getLayoutY() - (60)) / SQUARE_SIZE);
                            if ((x % 2 == 1 && y % 2 == 1) || (x % 2 == 0 && y % 2 == 0)) {
                                double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110;
                                double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
                                if (StepsGame.isPlacementSequenceValid(processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY))) {
                                    setLayoutX(NewX);
                                    setLayoutY(NewY);
                                    processing = processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY);
                                    finish();
                                    NotRotate = true;
                                } else {
                                    clear();
                                    NotRotate = false;
                                }
                            } else {
                                // to let the piece flip when it is magnifying..
                                // clear the image which is not satisfy the condition to place on the board
                                clear();
                                NotRotate = false;
                            }
                        } else {
                            clear();
                            NotRotate = false;
                        }
                    }

                    //after flip, the coordinate is changed

                    if ((!(this.boardPiece.piece == 'B' || this.boardPiece.piece == 'E')) &&
                            ((this.boardPiece.orientation == 'E') || (this.boardPiece.orientation == 'F') ||
                                    (this.boardPiece.orientation == 'G') || (this.boardPiece.orientation == 'H'))) {
                        if (getLayoutX() >= 110 + 40 - 30 && getLayoutX() <= 110 + 40 * 8 + 30 && getLayoutY() >= 60 + 40 - 30 && getLayoutY() <= 60 + 40 * 3 + 30) {
                            int x = (int) Math.round((getLayoutX() - 110) / SQUARE_SIZE);
                            int y = (int) Math.round((getLayoutY() - (60)) / SQUARE_SIZE);
                            if ((x % 2 == 1 && y % 2 == 0) || (x % 2 == 0 && y % 2 == 1)) { // to locate the board with specific location
                                double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110;
                                double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
                                if (StepsGame.isPlacementSequenceValid(processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY))) {
                                    setLayoutX(NewX);
                                    setLayoutY(NewY);
                                    processing = processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY);
                                    NotRotate = true;
                                    finish();
                                } else {
                                    clear();
                                    NotRotate = false;
                                }
                            } else {
                                // to let the piece flip when it is magnifying..
                                // clear the image which is not satisfy the condition to place on the board
                                clear();
                                NotRotate = false;
                            }
                        } else {
                            clear();
                            NotRotate = false;
                        }
                    }
                    if ((this.boardPiece.piece == 'B' && this.boardPiece.orientation == 'G') ||
                            (this.boardPiece.piece == 'E' && this.boardPiece.orientation == 'E')) {

                        if (getLayoutX() >= 110 - 30 && getLayoutX() <= 110 + 40 * 8 + 30 && getLayoutY() >= 60 - 30 && getLayoutY() <= 60 + 40 * 3 + 30) {
                            int x = (int) Math.round((getLayoutX() - 110) / SQUARE_SIZE);
                            int y = (int) Math.round((getLayoutY() - (60)) / SQUARE_SIZE);
                            if ((x % 2 == 1 && y % 2 == 0) || (x % 2 == 0 && y % 2 == 1)) { // to locate the board with specific location
                                double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110;
                                double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
                                if (StepsGame.isPlacementSequenceValid(processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY))) {
                                    setLayoutX(NewX);
                                    setLayoutY(NewY);
                                    processing = processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY);
                                    NotRotate = true;
                                    finish();
                                } else {
                                    clear();
                                    NotRotate = false;
                                }
                            } else {
                                // to let the piece flip when it is magnifying..
                                // clear the image which is not satisfy the condition to place on the board
                                clear();
                                NotRotate = false;
                            }
                        } else {
                            clear();
                            NotRotate = false;
                        }
                    }
                    if ((this.boardPiece.piece == 'B' && this.boardPiece.orientation == 'H') ||
                            (this.boardPiece.piece == 'E' && this.boardPiece.orientation == 'F')) {

                        if (getLayoutX() >= 110 + 40 - 30 && getLayoutX() <= 110 + 40 * 8 + 30 && getLayoutY() >= 60 - 30 && getLayoutY() <= 60 + 40 * 3 + 30) {
                            int x = (int) Math.round((getLayoutX() - 110) / SQUARE_SIZE);
                            int y = (int) Math.round((getLayoutY() - (60)) / SQUARE_SIZE);
                            if ((x % 2 == 1 && y % 2 == 0) || (x % 2 == 0 && y % 2 == 1)) { // to locate the board with specific location
                                double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110;
                                double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
                                if (StepsGame.isPlacementSequenceValid(processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY))) {
                                    setLayoutX(NewX);
                                    setLayoutY(NewY);
                                    processing = processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY);
                                    NotRotate = true;
                                    finish();
                                } else {
                                    clear();
                                    NotRotate = false;
                                }
                            } else {
                                // to let the piece flip when it is magnifying..
                                // clear the image which is not satisfy the condition to place on the board
                                clear();
                                NotRotate = false;
                            }
                        } else {
                            clear();
                            NotRotate = false;
                        }
                    }
                    if ((this.boardPiece.piece == 'B' && this.boardPiece.orientation == 'E') ||
                            (this.boardPiece.piece == 'E' && this.boardPiece.orientation == 'G')) {

                        if (getLayoutX() >= 110 + 40 - 30 && getLayoutX() <= 110 + 40 * 9 + 30 && getLayoutY() >= -5 && getLayoutY() <= 75 + 120) {
                            int x = (int) Math.round((getLayoutX() - 110) / SQUARE_SIZE);
                            int y = (int) Math.round((getLayoutY() - (60)) / SQUARE_SIZE);
                            if ((x % 2 == 1 && y % 2 == 0) || (x % 2 == 0 && y % 2 == 1)) { // to locate the board with specific location
                                double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110;
                                double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
                                if (StepsGame.isPlacementSequenceValid(processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY))) {
                                    setLayoutX(NewX);
                                    setLayoutY(NewY);
                                    processing = processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY);
                                    NotRotate = true;
                                    finish();
                                } else {
                                    clear();
                                    NotRotate = false;
                                }
                            } else {
                                // to let the piece flip when it is magnifying..
                                // clear the image which is not satisfy the condition to place on the board
                                clear();
                                NotRotate = false;
                            }
                        } else {
                            clear();
                            NotRotate = false;
                        }
                    }
                    if ((this.boardPiece.piece == 'B' && this.boardPiece.orientation == 'F') ||
                            (this.boardPiece.piece == 'E' && this.boardPiece.orientation == 'H')) {

                        if (getLayoutX() >= 110 + 40 - 30 && getLayoutX() <= 110 + 40 * 8 + 30 && getLayoutY() >= 60 + 40 - 30 && getLayoutY() <= 60 + 40 * 4 + 30) {
                            int x = (int) Math.round((getLayoutX() - 110) / SQUARE_SIZE);
                            int y = (int) Math.round((getLayoutY() - (60)) / SQUARE_SIZE);
                            if ((x % 2 == 1 && y % 2 == 0) || (x % 2 == 0 && y % 2 == 1)) { // to locate the board with specific location
                                double NewX = Math.round((getLayoutX() - 110) / SQUARE_SIZE) * SQUARE_SIZE + 110;
                                double NewY = Math.round((getLayoutY() - (60)) / SQUARE_SIZE) * SQUARE_SIZE + 60;
                                if (StepsGame.isPlacementSequenceValid(processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY))) {
                                    setLayoutX(NewX);
                                    setLayoutY(NewY);
                                    processing = processing + this.boardPiece.GetPO() + GetLocation(NewX, NewY);
                                    finish();
                                    NotRotate = true;
                                } else {
                                    clear();
                                    NotRotate = false;
                                }
                            } else {
                                // to let the piece flip when it is magnifying..
                                // clear the image which is not satisfy the condition to place on the board
                                clear();
                                NotRotate = false;
                            }
                        } else {
                            clear();
                            NotRotate = false;
                        }
                    }
                });
            }
        }

        // FIXME Task 7: Implement a basic playable Steps Game in JavaFX that only allows pieces to be placed in valid places

        /** task 7 is done by PENG YONG below.
         */
        /* update the processing (placement state when one piece is removed) */
        private String update(){
            List<String> duplicate = new ArrayList<>();
            for (int i = 0; i < processing.length() / 3; i++){
                duplicate.add(processing.substring(3 * i , 3 * (i + 1)));
            }
            String result = new String();
            for (String m : duplicate){
                if(this.boardPiece.getPiece() != m.charAt(0)){
                    result = result + m;
                }
            }
            return result;
        }
        /* get the location on the board. the top left is (0,0) and the bottom right is (10, 5)*/
        public char GetLocation(double x, double y){
            double RealX = x - 110;
            double RealY = y -(60);
            int number = (int) (10 * RealY / 40 + RealX / 40);
            if (number <= 24 && number >= 0){
                char start = 'A';
                start += number;
                return start;
            }else{
                int Number = number - 25;
                char other = 'a';
                other += Number;
                return other;
            }
        }

        /* return things back when the snap operation failed*/
        private void clear(){
            if (this.boardPiece.piece == 'A' || this.boardPiece.piece == 'B' || this.boardPiece.piece == 'C' || this.boardPiece.piece == 'D'){
                setLayoutX(-50);
                setLayoutY((this.boardPiece.piece - 'A') * PIECE_IMAGE_SIZE  - 50);

            }
            if (this.boardPiece.piece == 'E' || this.boardPiece.piece == 'F' || this.boardPiece.piece == 'G' || this.boardPiece.piece == 'H'){
                setLayoutX(700);
                setLayoutY((this.boardPiece.piece - 'E') * PIECE_IMAGE_SIZE - 50);
            }
        }

        /*rotate the pieces when needed */
        private void rotate() {
            if (! NotRotate) {
                setRotate(getRotate() + 90);
                if (this.boardPiece.orientation == 'D'){
                    this.boardPiece.orientation = 'A';
                    return;
                }
                if (this.boardPiece.orientation >= 'A' && this.boardPiece.orientation < 'D'){
                    this.boardPiece.orientation += 1;
                    return;
                }
                if (this.boardPiece.orientation == 'H'){
                    this.boardPiece.orientation = 'E';
                    return;
                }
                if (this.boardPiece.orientation >= 'E' && this.boardPiece.orientation < 'H'){
                    this.boardPiece.orientation += 1;
                    return;
                }
            }
        }

        /* give the user information remind them when the game is over*/
        private void finish() {
            if (processing.length() == 24) {
                Text F = new Text("Good job! press the restart for a new game!");
                F.setLayoutX(300);
                F.setLayoutY(450);
                F.setFill(Color.BLUE);
                F.setScaleY(3);
                F.setScaleX(1.5);
                Finish.getChildren().add(F);
            }else{
                Finish.getChildren().clear();
            }
        }

    }
    /* put all the pieces in the board, including the starting pieces and pieces in two sides */

    // FIXME Task 8: Implement starting placements

    /**
     * task 8 is done by PENG YONG below
     */

    public void PutPieces(String placement) {
        if (placement.length() >= 3) {
            String used = "";
            for (int i = 0; i < placement.length() / 3; i++) {
                used = used + placement.substring(3 * i, 3 * i + 1);
            }
            for (int i = 0; i < PIECES.length(); i++) {
                if (!used.contains(PIECES.substring(i, i + 1))) {
                    Pieces FXp = new Pieces(PIECES.charAt(i), 'A', 'A');
                    Piece Add = new Piece(FXp, true);
                    pieces.getChildren().add(Add);
                }
            }
            List<String> Target = new ArrayList<>();
            for (int i = 0; i < placement.length() / 3; i++) {
                Target.add(placement.substring(3 * i, 3 * (i + 1)));
            }
            for (String m : Target) {
                Pieces OnBoard = new Pieces(m.charAt(0), m.charAt(1), m.charAt(2));
                Piece other = new Piece(OnBoard, false);
                pieces.getChildren().add(other);
            }
            processing = processing + placement;

        }
    }

    /*this is used to draw the basic board for the game*/

    public void drawBoard(){
        int gap = 40;
        for (int i = 0; i < BOARD_ROW; i++) {
            for (int m = 0; m < BOARD_COLS; m++) {
                if (i % 2 == 1 && m % 2 == 1) {
                    Circle peg = new Circle(250 + m* gap, 200 + i * gap, PEG_RADIUS, Color.LIGHTGREY);
                    root.getChildren().add(peg); // middle two in the board
                }
                if (i % 2 == 0 && m % 2 == 0) {
                    Circle peg = new Circle(250 + m* gap, 200 + i * gap, PEG_RADIUS, Color.LIGHTGREY);
                    root.getChildren().add(peg);
                }
            }
        }
    }

    // FIXME Task 11: Generate interesting starting placement

    /**
     * task 11 is done by PENG YONG below
     */
    /* used to generate different level of game */
    public void  makecontrols(){
        Button button = new Button("Restart");
        button.setLayoutX(500);
        button.setLayoutY(600);
        button.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                // new game should be here
                newGame();
            }
        });
        difficulty.setMin(0);
        difficulty.setMax(10);
        difficulty.setMajorTickUnit(5);
        difficulty.setMinorTickCount(1);
        difficulty.setShowTickLabels(true);
        difficulty.setShowTickMarks(true);
        difficulty.setLayoutX(320);
        difficulty.setLayoutY(600);
        controls.getChildren().add(difficulty);
        controls.getChildren().add(button);
        difficulty.setValue(0);
        difficulty.setSnapToTicks(true);

        final Label difficultyCaption = new Label("Difficulty:");
        difficultyCaption.setTextFill(Color.GREY);
        difficultyCaption.setLayoutX(320);
        difficultyCaption.setLayoutY(580);
        controls.getChildren().add(difficultyCaption);
    }
    /*this is used to restart different level of games for user used in the makecontrols()*/
    public void newGame(){
        Finish.getChildren().clear();
        Random R = new Random();
        int m = R.nextInt(10);
        double level = difficulty.getValue();
        if (level == 0.0){
            pieces.getChildren().clear();
            processing = "";
            PutPieces(RandomPlacement[m+40][0]);
        }
        if (level == 2.5){
            pieces.getChildren().clear();
            processing = "";
            PutPieces(RandomPlacement[m+30][0]);
        }
        if (level == 5.0){
            pieces.getChildren().clear();
            processing = "";
            PutPieces(RandomPlacement[m+20][0]);
        }
        if (level == 7.5){
            pieces.getChildren().clear();
            processing = "";
            PutPieces(RandomPlacement[m+10][0]);
        }
        if (level == 10.0){
            pieces.getChildren().clear();
            processing = "";
            PutPieces(RandomPlacement[m][0]);
        }

    }

    // FIXME Task 10: Implement hints

    /**
     * task 10 is done by PENG YONG below.
     */
    /*add the function on the keyboard */
    private void OnKey(Scene scene) {
        scene.setOnKeyPressed(event -> {
            if (processing.length() == 24){
                event.consume();
                return;
            }
            if (event.getCode() == KeyCode.SLASH) {
                if (CheckNow(processing)) {
                    List<String> R = Next(processing);
                    Random m = new Random();
                    int index = m.nextInt(R.size());
                    String wanted = R.get(index);
                    Draw(wanted);
                } else {
                    Text warn = new Text("Your placement is no solution now, put the latest one back and try again!");
                    warn.setFill(Color.RED);
                    warn.setLayoutX(210);
                    warn.setLayoutY(480);
                    warn.setScaleY(3);
                    warn.setScaleX(1.5);
                    Text.getChildren().add(warn);
                }
            }else if (event.getCode() == KeyCode.Q){
                Platform.exit();
            }else if (event.getCode() == KeyCode.M){
                Music();
            }
            event.consume();
        });
        scene.setOnKeyReleased(event -> {
            Text.getChildren().clear();
            Hit.getChildren().clear();
            event.consume();
        });
    }
    /*this is to show the hit on the board to let the player to play, if there is no hit, more information will be given*/
    private void Draw(String placement){
        ImageView hit = new ImageView();
        char shape = placement.charAt(0);
        char orientation = placement.charAt(1);
        char where = placement.charAt(2);
        int i = 0;
        if (orientation <= 'D'){
            Image name = new Image(Viewer.class.getResource(URI_BASE+shape+"A"+".png").toString());
            hit.setImage(name);
            i = orientation - 'A';
            hit.setRotate(i * 90);
            hit.setScaleX(0.53);
            hit.setScaleY(0.53);
            for (int[] n: location){
                if ((int) where == n[0]){
                    hit.setLayoutX(n[1]);
                    hit.setLayoutY(n[2]);
                }
            }
            Hit.getChildren().add(hit);
        }
        if (orientation > 'D'){
            Image name = new Image(Viewer.class.getResource(URI_BASE+shape+"E"+".png").toString());
            hit.setImage(name);
            i = orientation - 'E';
            hit.setRotate(i * 90);
            hit.setScaleX(0.53);
            hit.setScaleY(0.53);
            for (int[] n: location){
                if ((int) where == n[0]){
                    hit.setLayoutX(n[1]);
                    hit.setLayoutY(n[2]);
                }
            }
            Hit.getChildren().add(hit);
        }

    }
    /* give the hit to the user for the game now */
    private List<String> Next(String Target){
        List<String> result = new ArrayList<>();
        for (String[] m: RandomPlacement){
            for (int i = 1; i<m.length; i++){
                if (Objects.equals(m[i].substring(0, Target.length()), Target)) {
                    result.add(m[i].substring(Target.length(), Target.length() + 3));
                }
            }
        }
        List<String> end = new ArrayList<>();
        List<String> reference = new ArrayList<>();
        for (String m: result){
            if (! reference.contains(m.substring(0,1))){
                end.add(m);
                reference.add(m.substring(0,1));
            }
        }
        return end;
    }
    /* play the music for the player if they want */
    public void Music(){
        loop = new AudioClip(MUSIC);
        loop.setCycleCount(AudioClip.INDEFINITE);
        if (Loopplaying){
            loop.play();
        }else{
            loop.stop();
        }
        Loopplaying = ! Loopplaying;
    }
    /* to check whether placement now has the solution, if not, return false.*/
    private boolean CheckNow(String Target){ // to check the whether placement now has solution
        for (String[] m: RandomPlacement){
            for (int i = 1; i < m.length; i++){
                if (Objects.equals(m[i].substring(0, Target.length()), Target)) {
                    return true;
                }
            }
        }
        return false;
    }

    /* add instruction for the users */
    private void Instruct(){
        Text instru = new Text("Instruction: single right click to flip. Scroll the mouse to rotate. single left \n" +
                "click to drag. Press SLASH(/) to give the hit. Press 'M' to play music");
        instru.setLayoutX(250);
        instru.setLayoutY(50);
        instruction.getChildren().add(instru);
    }

    @Override
    public void start(Stage primaryStage) throws Exception {
        Random R = new Random();
        int index = R.nextInt(RandomPlacement.length);
        primaryStage.setTitle("IQ-Steps");
        root.getChildren().add(controls);
        drawBoard();
        Scene scene = new Scene(root, BOARD_WIDTH, BOARD_HEIGHT);
        OnKey(scene);
        PutPieces(RandomPlacement[index][0]);
        makecontrols();
        Instruct();
        root.getChildren().add(pieces);
        root.getChildren().add(Hit);
        root.getChildren().add(Text);
        root.getChildren().add(Finish);
        root.getChildren().add(instruction);
        primaryStage.setScene(scene);
        primaryStage.show();

    }
}
